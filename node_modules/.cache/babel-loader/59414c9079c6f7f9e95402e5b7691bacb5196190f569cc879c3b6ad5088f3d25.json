{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  var _useEthers = useEthers(),\n    providerChainId = _useEthers.chainId;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    tokenList = _useState2[0],\n    setTokenList = _useState2[1];\n  var chainId = overrideChainId || providerChainId;\n  useEffect(function () {\n    var _ref;\n    fetch(tokenListURI).then(function (_x) {\n      return (_ref = _ref || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n        var _yield$response$json, name, logoURI, tokens, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 3;\n              return response.json();\n            case 3:\n              _yield$response$json = _context.sent;\n              name = _yield$response$json.name;\n              logoURI = _yield$response$json.logoURI;\n              tokens = _yield$response$json.tokens;\n              setTokenList({\n                name: name,\n                logoURI: logoURI,\n                tokens: tokens.filter(function (token) {\n                  var sameChainId = token.chainId === chainId;\n                  if (!tags) {\n                    return sameChainId;\n                  }\n                  return sameChainId && token.tags && token.tags.some(function (tag) {\n                    return tags.includes(tag);\n                  });\n                })\n              });\n              _context.next = 14;\n              break;\n            case 10:\n              _context.next = 12;\n              return response.text();\n            case 12:\n              errorMessage = _context.sent;\n              return _context.abrupt(\"return\", Promise.reject(new Error(errorMessage)));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))).apply(this, arguments);\n    }).catch(function (err) {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"names":["useEffect","useState","useEthers","useTokenList","tokenListURI","overrideChainId","tags","_useEthers","providerChainId","chainId","_useState","_useState2","_slicedToArray","tokenList","setTokenList","_ref","fetch","then","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","_yield$response$json","name","logoURI","tokens","errorMessage","wrap","_callee$","_context","prev","next","ok","json","sent","filter","token","sameChainId","some","tag","includes","text","abrupt","Promise","reject","Error","stop","apply","arguments","catch","err","console","log","undefined"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\hooks\\useTokenList.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { useEthers } from './useEthers'\n\n/**\n * useTokenList return type.\n */\nexport interface TokenList {\n  name: string\n  logoURI: string\n  tokens: TokenInfo[]\n}\n\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI: string, overrideChainId?: number, tags?: string[]): TokenList | undefined {\n  const { chainId: providerChainId } = useEthers()\n  const [tokenList, setTokenList] = useState<TokenList>()\n\n  const chainId = overrideChainId || providerChainId\n\n  useEffect(() => {\n    fetch(tokenListURI)\n      .then(async (response) => {\n        if (response.ok) {\n          const { name, logoURI, tokens } = await response.json()\n          setTokenList({\n            name,\n            logoURI,\n            tokens: (tokens as TokenInfo[]).filter((token) => {\n              const sameChainId = token.chainId === chainId\n              if (!tags) {\n                return sameChainId\n              }\n              return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag))\n            }),\n          })\n        } else {\n          const errorMessage = await response.text()\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setTokenList(undefined)\n      })\n  }, [tokenListURI, chainId])\n\n  return tokenList\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,SAAS,QAAQ,aAAa;AAWvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,OAAM,SAAUC,YAAYA,CAACC,YAAoB,EAAEC,eAAwB,EAAEC,IAAe;EAC1F,IAAAC,UAAA,GAAqCL,SAAS,EAAE;IAA/BM,eAAe,GAAAD,UAAA,CAAxBE,OAAO;EACf,IAAAC,SAAA,GAAkCT,QAAQ,EAAa;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhDG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAE9B,IAAMF,OAAO,GAAGJ,eAAe,IAAIG,eAAe;EAElDR,SAAS,CAAC,YAAK;IAAA,IAAAe,IAAA;IACbC,KAAK,CAACZ,YAAY,CAAC,CAChBa,IAAI,WAAAC,EAAA;MAAA,QAAAH,IAAA,GAAAA,IAAA,IAAAI,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAAOC,QAAQ;QAAA,IAAAC,oBAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,YAAA;QAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,KACfV,QAAQ,CAACW,EAAE;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAC2BV,QAAQ,CAACY,IAAI,EAAE;YAAA;cAAAX,oBAAA,GAAAO,QAAA,CAAAK,IAAA;cAA/CX,IAAI,GAAAD,oBAAA,CAAJC,IAAI;cAAEC,OAAO,GAAAF,oBAAA,CAAPE,OAAO;cAAEC,MAAM,GAAAH,oBAAA,CAANG,MAAM;cAC7Bb,YAAY,CAAC;gBACXW,IAAI,EAAJA,IAAI;gBACJC,OAAO,EAAPA,OAAO;gBACPC,MAAM,EAAGA,MAAsB,CAACU,MAAM,CAAC,UAACC,KAAK,EAAI;kBAC/C,IAAMC,WAAW,GAAGD,KAAK,CAAC7B,OAAO,KAAKA,OAAO;kBAC7C,IAAI,CAACH,IAAI,EAAE;oBACT,OAAOiC,WAAW;;kBAEpB,OAAOA,WAAW,IAAID,KAAK,CAAChC,IAAI,IAAIgC,KAAK,CAAChC,IAAI,CAACkC,IAAI,CAAC,UAACC,GAAG;oBAAA,OAAKnC,IAAI,CAACoC,QAAQ,CAACD,GAAG,CAAC;kBAAA,EAAC;gBAClF,CAAC;eACF,CAAC;cAAAV,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAEyBV,QAAQ,CAACoB,IAAI,EAAE;YAAA;cAApCf,YAAY,GAAAG,QAAA,CAAAK,IAAA;cAAA,OAAAL,QAAA,CAAAa,MAAA,WACXC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACnB,YAAY,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAiB,IAAA;UAAA;QAAA,GAAA1B,OAAA;MAAA,CAEjD,IAAA2B,KAAA,OAAAC,SAAA;IAAA,EAAC,CACDC,KAAK,CAAC,UAACC,GAAG,EAAI;MACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBtC,YAAY,CAACyC,SAAS,CAAC;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,CAACnD,YAAY,EAAEK,OAAO,CAAC,CAAC;EAE3B,OAAOI,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}