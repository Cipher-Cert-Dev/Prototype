{"ast":null,"code":"import _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n  var chainId = useChainId();\n  var readOnlyNetworks = useReadonlyNetworks();\n  var _useConnector = useConnector(),\n    connector = _useConnector.connector;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    blockNumber = _useState2[0],\n    setBlockNumber = _useState2[1];\n  var isActive = useWindow();\n  var isMounted = useIsMounted();\n  useEffect(function () {\n    if (!isActive) {\n      return;\n    }\n    var readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n    if (readOnlyNetwork) {\n      var _unsub = subscribeToNewBlock(readOnlyNetwork, chainId, function (_ref) {\n        var blockNumber = _ref.blockNumber;\n        if (isMounted()) {\n          setBlockNumber(blockNumber);\n        }\n      }, isActive);\n      return function () {\n        return _unsub();\n      };\n    }\n    if (!connector) {\n      return;\n    }\n    var unsub = connector.newBlock.on(function (blockNumber) {\n      if (isMounted()) {\n        setBlockNumber(blockNumber);\n      }\n    });\n    return function () {\n      return unsub();\n    };\n  }, [isActive, readOnlyNetworks, connector, chainId]);\n  var debouncedBlockNumber = useDebounce(blockNumber, 100);\n  return debouncedBlockNumber;\n}","map":{"version":3,"names":["useEffect","useState","subscribeToNewBlock","useReadonlyNetworks","useWindow","useConnector","useChainId","useDebounce","useIsMounted","useBlockNumber","chainId","readOnlyNetworks","_useConnector","connector","_useState","_useState2","_slicedToArray","blockNumber","setBlockNumber","isActive","isMounted","readOnlyNetwork","unsub","_ref","newBlock","on","debouncedBlockNumber"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\hooks\\useBlockNumber.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport type { ChainId } from '../constants'\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers'\nimport { useConnector } from '../providers/network/connectors'\nimport { useChainId } from './useChainId'\nimport { useDebounce } from './useDebounce'\nimport { useIsMounted } from './useIsMounted'\n\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber(): number | undefined {\n  const chainId = useChainId()\n  const readOnlyNetworks = useReadonlyNetworks()\n  const { connector } = useConnector()\n  const [blockNumber, setBlockNumber] = useState<number>()\n  const isActive = useWindow()\n  const isMounted = useIsMounted()\n\n  useEffect(() => {\n    if (!isActive) {\n      return\n    }\n\n    const readOnlyNetwork = chainId && readOnlyNetworks[(chainId as unknown) as ChainId]\n    if (readOnlyNetwork) {\n      const unsub = subscribeToNewBlock(\n        readOnlyNetwork,\n        chainId,\n        ({ blockNumber }) => {\n          if (isMounted()) {\n            setBlockNumber(blockNumber)\n          }\n        },\n        isActive\n      )\n      return () => unsub()\n    }\n\n    if (!connector) {\n      return\n    }\n    const unsub = connector.newBlock.on((blockNumber) => {\n      if (isMounted()) {\n        setBlockNumber(blockNumber)\n      }\n    })\n    return () => unsub()\n  }, [isActive, readOnlyNetworks, connector, chainId])\n\n  const debouncedBlockNumber = useDebounce(blockNumber, 100)\n  return debouncedBlockNumber\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,SAAS,QAAQ,cAAc;AAClF,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,YAAY,QAAQ,gBAAgB;AAE7C;;;;;AAKA,OAAM,SAAUC,cAAcA,CAAA;EAC5B,IAAMC,OAAO,GAAGJ,UAAU,EAAE;EAC5B,IAAMK,gBAAgB,GAAGR,mBAAmB,EAAE;EAC9C,IAAAS,aAAA,GAAsBP,YAAY,EAAE;IAA5BQ,SAAS,GAAAD,aAAA,CAATC,SAAS;EACjB,IAAAC,SAAA,GAAsCb,QAAQ,EAAU;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjDG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAMI,QAAQ,GAAGf,SAAS,EAAE;EAC5B,IAAMgB,SAAS,GAAGZ,YAAY,EAAE;EAEhCR,SAAS,CAAC,YAAK;IACb,IAAI,CAACmB,QAAQ,EAAE;MACb;;IAGF,IAAME,eAAe,GAAGX,OAAO,IAAIC,gBAAgB,CAAED,OAA8B,CAAC;IACpF,IAAIW,eAAe,EAAE;MACnB,IAAMC,MAAK,GAAGpB,mBAAmB,CAC/BmB,eAAe,EACfX,OAAO,EACP,UAAAa,IAAA,EAAoB;QAAA,IAAjBN,WAAW,GAAAM,IAAA,CAAXN,WAAW;QACZ,IAAIG,SAAS,EAAE,EAAE;UACfF,cAAc,CAACD,WAAW,CAAC;;MAE/B,CAAC,EACDE,QAAQ,CACT;MACD,OAAO;QAAA,OAAMG,MAAK,EAAE;MAAA;;IAGtB,IAAI,CAACT,SAAS,EAAE;MACd;;IAEF,IAAMS,KAAK,GAAGT,SAAS,CAACW,QAAQ,CAACC,EAAE,CAAC,UAACR,WAAW,EAAI;MAClD,IAAIG,SAAS,EAAE,EAAE;QACfF,cAAc,CAACD,WAAW,CAAC;;IAE/B,CAAC,CAAC;IACF,OAAO;MAAA,OAAMK,KAAK,EAAE;IAAA;EACtB,CAAC,EAAE,CAACH,QAAQ,EAAER,gBAAgB,EAAEE,SAAS,EAAEH,OAAO,CAAC,CAAC;EAEpD,IAAMgB,oBAAoB,GAAGnB,WAAW,CAACU,WAAW,EAAE,GAAG,CAAC;EAC1D,OAAOS,oBAAoB;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}