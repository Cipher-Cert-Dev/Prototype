{"ast":null,"code":"import _defineProperty from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nexport function transactionReducer(state, action) {\n  var _a, _b;\n  switch (action.type) {\n    case 'ADD_TRANSACTION':\n      {\n        var chainId = action.payload.transaction.chainId;\n        return Object.assign(Object.assign({}, state), _defineProperty({}, chainId, [action.payload].concat(_toConsumableArray((_a = state[chainId]) !== null && _a !== void 0 ? _a : []))));\n      }\n    case 'UPDATE_TRANSACTION':\n      {\n        var _action$payload$trans = action.payload.transaction,\n          _chainId = _action$payload$trans.chainId,\n          hash = _action$payload$trans.hash;\n        return Object.assign(Object.assign({}, state), _defineProperty({}, _chainId, ((_b = state[_chainId]) !== null && _b !== void 0 ? _b : []).map(function (tx) {\n          return tx.transaction.hash === hash ? Object.assign(Object.assign({}, tx), action.payload) : tx;\n        })));\n      }\n    case 'UPDATE_TRANSACTIONS':\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, _toConsumableArray(action.transactions)));\n  }\n}","map":{"version":3,"names":["transactionReducer","state","action","type","chainId","payload","transaction","Object","assign","_defineProperty","concat","_toConsumableArray","_a","_action$payload$trans","hash","_b","map","tx","transactions"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\transactions\\reducer.ts"],"sourcesContent":["import { StoredTransaction, StoredTransactions, UpdatedTransaction } from './model'\n\ntype Action = AddTransaction | UpdateTransaction | UpdateTransactions\n\ninterface AddTransaction {\n  type: 'ADD_TRANSACTION'\n  payload: StoredTransaction\n}\ninterface UpdateTransaction {\n  type: 'UPDATE_TRANSACTION'\n  payload: UpdatedTransaction\n}\ninterface UpdateTransactions {\n  type: 'UPDATE_TRANSACTIONS'\n  chainId: number\n  transactions: StoredTransaction[]\n}\n\nexport function transactionReducer(state: StoredTransactions, action: Action): StoredTransactions {\n  switch (action.type) {\n    case 'ADD_TRANSACTION': {\n      const { chainId } = action.payload.transaction\n      return {\n        ...state,\n        [chainId]: [action.payload, ...(state[chainId] ?? [])],\n      }\n    }\n    case 'UPDATE_TRANSACTION': {\n      const { chainId, hash } = action.payload.transaction\n      return {\n        ...state,\n        [chainId]: (state[chainId] ?? []).map((tx) =>\n          tx.transaction.hash === hash ? { ...tx, ...action.payload } : tx\n        ),\n      }\n    }\n    case 'UPDATE_TRANSACTIONS':\n      return { ...state, [action.chainId]: [...action.transactions] }\n  }\n}\n"],"mappings":";;AAkBA,OAAM,SAAUA,kBAAkBA,CAACC,KAAyB,EAAEC,MAAc;;EAC1E,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MAAE;QACtB,IAAQC,OAAO,GAAKF,MAAM,CAACG,OAAO,CAACC,WAAW,CAAtCF,OAAO;QACf,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKP,KAAK,GAAAQ,eAAA,KACPL,OAAO,GAAIF,MAAM,CAACG,OAAO,EAAAK,MAAA,CAAAC,kBAAA,CAAM,CAAAC,EAAA,GAAAX,KAAK,CAACG,OAAO,CAAC,cAAAQ,EAAA,cAAAA,EAAA,GAAI,EAAE,GAAE;;IAG1D,KAAK,oBAAoB;MAAE;QACzB,IAAAC,qBAAA,GAA0BX,MAAM,CAACG,OAAO,CAACC,WAAW;UAA5CF,QAAO,GAAAS,qBAAA,CAAPT,OAAO;UAAEU,IAAI,GAAAD,qBAAA,CAAJC,IAAI;QACrB,OAAAP,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKP,KAAK,GAAAQ,eAAA,KACPL,QAAO,EAAG,CAAC,CAAAW,EAAA,GAAAd,KAAK,CAACG,QAAO,CAAC,cAAAW,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAEC,GAAG,CAAC,UAACC,EAAE;UAAA,OACvCA,EAAE,CAACX,WAAW,CAACQ,IAAI,KAAKA,IAAI,GAAEP,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMS,EAAE,GAAKf,MAAM,CAACG,OAAO,IAAKY,EAAE;QAAA,EACjE;;IAGL,KAAK,qBAAqB;MACxB,OAAAV,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYP,KAAK,GAAAQ,eAAA,KAAGP,MAAM,CAACE,OAAO,EAAAO,kBAAA,CAAOT,MAAM,CAACgB,YAAY,EAAC;;AAEnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}