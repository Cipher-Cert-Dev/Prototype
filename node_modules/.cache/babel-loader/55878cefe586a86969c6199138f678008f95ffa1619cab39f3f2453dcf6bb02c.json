{"ast":null,"code":"import _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _multicall, _fastEncodingMulticall;\nimport { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nvar ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\nexport var multicall2Factory = function multicall2Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall2 : multicall2;\n};\n/**\n * @public\n */\nexport function multicall2(_x, _x2, _x3, _x4) {\n  return (_multicall = _multicall || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(requests.length === 0)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", {});\n        case 2:\n          contract = new Contract(address, ABI, provider);\n          _context.next = 5;\n          return contract.tryAggregate(false, requests.map(function (_ref) {\n            var address = _ref.address,\n              data = _ref.data;\n            return [address, data];\n          }), {\n            blockTag: blockNumber\n          });\n        case 5:\n          results = _context.sent;\n          return _context.abrupt(\"return\", decodeResult(results, requests));\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }))).apply(this, arguments);\n}\n/**\n * @public\n */\nexport function fastEncodingMulticall2(_x5, _x6, _x7, _x8) {\n  return (_fastEncodingMulticall = _fastEncodingMulticall || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeTryAggregate, _decodeTryAggregate2, results;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(requests.length === 0)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", {});\n        case 2:\n          _context2.next = 4;\n          return provider.call({\n            to: address,\n            data: encodeTryAggregate(false, requests.map(function (_ref2) {\n              var address = _ref2.address,\n                data = _ref2.data;\n              return [address, data];\n            }))\n          }, blockNumber);\n        case 4:\n          response = _context2.sent;\n          _decodeTryAggregate = decodeTryAggregate(response), _decodeTryAggregate2 = _slicedToArray(_decodeTryAggregate, 1), results = _decodeTryAggregate2[0];\n          return _context2.abrupt(\"return\", decodeResult(results, requests));\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }))).apply(this, arguments);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  var state = {};\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n      address = _requests$i.address,\n      data = _requests$i.data;\n    var _results$i = _slicedToArray(results[i], 2),\n      success = _results$i[0],\n      value = _results$i[1];\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success: success,\n      value: value\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}","map":{"version":3,"names":["Contract","decodeTryAggregate","encodeTryAggregate","ABI","multicall2Factory","fastEncoding","fastEncodingMulticall2","multicall2","_x","_x2","_x3","_x4","_multicall","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","address","blockNumber","requests","contract","results","wrap","_callee$","_context","prev","next","length","abrupt","tryAggregate","map","_ref","data","blockTag","sent","decodeResult","stop","apply","arguments","_x5","_x6","_x7","_x8","_fastEncodingMulticall","_callee2","response","_decodeTryAggregate","_decodeTryAggregate2","_callee2$","_context2","call","to","_ref2","_slicedToArray","state","i","_requests$i","_results$i","success","value","stateForAddress","_a"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\multicall2.ts"],"sourcesContent":["import { Contract, providers } from 'ethers'\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n]\n\n/**\n * @public\n */\nexport const multicall2Factory = (fastEncoding: boolean) => (fastEncoding ? fastEncodingMulticall2 : multicall2)\n\n/**\n * @public\n */\nexport async function multicall2(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const results: [boolean, string][] = await contract.tryAggregate(\n    false,\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  return decodeResult(results, requests)\n}\n\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const response = await provider.call(\n    {\n      to: address,\n      data: encodeTryAggregate(\n        false,\n        requests.map(({ address, data }) => [address, data])\n      ),\n    },\n    blockNumber\n  )\n  const [results] = decodeTryAggregate(response)\n  return decodeResult(results, requests)\n}\n\nfunction decodeResult(results: [boolean, string][], requests: RawCall[]) {\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const [success, value] = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { success, value }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}