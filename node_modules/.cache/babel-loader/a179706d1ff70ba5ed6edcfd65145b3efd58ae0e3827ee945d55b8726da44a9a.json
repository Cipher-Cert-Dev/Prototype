{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n  var _ref;\n  var _a, _b, _c;\n  var _useEthers = useEthers(),\n    library = _useEthers.library,\n    chainId = _useEthers.chainId;\n  var transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  var _usePromiseTransactio = usePromiseTransaction(transactionChainId, options),\n    promiseTransaction = _usePromiseTransactio.promiseTransaction,\n    state = _usePromiseTransactio.state,\n    resetState = _usePromiseTransactio.resetState;\n  var config = useConfig();\n  var gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  var providers = useReadonlyNetworks();\n  var provider = transactionChainId && providers[transactionChainId];\n  var sendTransaction = function sendTransaction(_x) {\n    return (_ref = _ref || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transactionRequest) {\n      var _a, _b, _c, signer, gasLimit, sanitizedTransaction;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            signer = getSignerFromOptions(provider, options, library);\n            if (!signer) {\n              _context.next = 7;\n              break;\n            }\n            _context.next = 4;\n            return estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n          case 4:\n            gasLimit = _context.sent;\n            sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), {\n              gasLimit: gasLimit\n            }));\n            return _context.abrupt(\"return\", promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n              safeTransaction: {\n                to: sanitizedTransaction.to,\n                value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n                data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n                safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString()\n              }\n            }, transactionRequest));\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))).apply(this, arguments);\n  };\n  return {\n    sendTransaction: sendTransaction,\n    state: state,\n    resetState: resetState\n  };\n}","map":{"version":3,"names":["useConfig","useEthers","estimateTransactionGasLimit","usePromiseTransaction","useReadonlyNetworks","getSignerFromOptions","sanitizeTransactionRequest","useSendTransaction","options","_ref","_useEthers","library","chainId","transactionChainId","_usePromiseTransactio","promiseTransaction","state","resetState","config","gasLimitBufferPercentage","_c","_b","_a","bufferGasLimitPercentage","providers","provider","sendTransaction","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","transactionRequest","signer","gasLimit","sanitizedTransaction","wrap","_callee$","_context","prev","next","sent","Object","assign","abrupt","safeTransaction","to","value","toString","data","safeTxGas","stop","apply","arguments"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\hooks\\useSendTransaction.ts"],"sourcesContent":["import type { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions } from '../model/TransactionOptions'\nimport { useConfig } from './useConfig'\nimport { useEthers } from './useEthers'\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context'\nimport { ChainId } from '../constants'\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions'\nimport { providers } from 'ethers'\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils'\n\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const transactionChainId = (options && 'chainId' in options && options?.chainId) || chainId\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options)\n\n  const config = useConfig()\n  const gasLimitBufferPercentage =\n    options?.gasLimitBufferPercentage ?? options?.bufferGasLimitPercentage ?? config?.gasLimitBufferPercentage ?? 0\n\n  const providers = useReadonlyNetworks()\n  const provider = (transactionChainId && providers[transactionChainId as ChainId])!\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = getSignerFromOptions(provider as providers.BaseProvider, options, library)\n\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage)\n\n      const sanitizedTransaction = sanitizeTransactionRequest({\n        ...transactionRequest,\n        gasLimit,\n      })\n\n      return promiseTransaction(\n        signer.sendTransaction(sanitizedTransaction),\n        {\n          safeTransaction: {\n            to: sanitizedTransaction.to,\n            value: sanitizedTransaction.value?.toString(),\n            data: sanitizedTransaction.data?.toString(),\n            safeTxGas: sanitizedTransaction.gasLimit?.toString(),\n          },\n        },\n        transactionRequest\n      )\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}