{"ast":null,"code":"import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\nimport { useChainId } from './useChainId';\nfunction warnOnInvalidContractCall(call) {\n  console.warn(\"Invalid contract call: address=\".concat(call && call.address, \" method=\").concat(call && call.method, \" args=\").concat(call && call.args));\n}\nfunction encodeCallData(call, chainId) {\n  if (!call) {\n    return undefined;\n  }\n  if (!call.address || !call.method) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n  try {\n    return {\n      address: call.address,\n      data: call.abi.encodeFunctionData(call.method, call.args),\n      chainId: chainId\n    };\n  } catch (_a) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n}\n/**\n * Makes a call to a specific contract and returns the value. The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for {@link useChainCall} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param call a single call to a contract, also see {@link ContractCall}.\n * @deprecated It is recommended to use {@link useCall} instead of this method as it is deprecated.\n * @returns the result of a call or undefined if call didn't return yet.\n */\nexport function useContractCall(call) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useContractCalls([call], queryParams)[0];\n}\n/**\n * Makes calls to specific contracts and returns values. The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for {@link useChainCalls} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param calls a list of contract calls , also see {@link ContractCall}.\n * @deprecated It is recommended to use {@link useCalls} instead of this method as it is deprecated.\n * @returns array of results. Undefined if call didn't return yet.\n */\nexport function useContractCalls(calls) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var chainId = useChainId({\n    queryParams: queryParams\n  });\n  var rawCalls = useMemo(function () {\n    return calls.map(function (call) {\n      return chainId !== undefined ? encodeCallData(call, chainId) : undefined;\n    });\n  }, [JSON.stringify(calls.map(function (call) {\n    var _a;\n    return call && {\n      address: (_a = call.address) === null || _a === void 0 ? void 0 : _a.toLowerCase(),\n      method: call.method,\n      args: call.args\n    };\n  })), chainId]);\n  var results = useChainCalls(rawCalls);\n  return useMemo(function () {\n    return results.map(function (result, idx) {\n      var call = calls[idx];\n      if (result === '0x') {\n        warnOnInvalidContractCall(call);\n        return undefined;\n      }\n      return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n    });\n  }, [JSON.stringify(results)]);\n}","map":{"version":3,"names":["useMemo","useChainCalls","useChainId","warnOnInvalidContractCall","call","console","warn","concat","address","method","args","encodeCallData","chainId","undefined","data","abi","encodeFunctionData","_a","useContractCall","queryParams","arguments","length","useContractCalls","calls","rawCalls","map","JSON","stringify","toLowerCase","results","result","idx","decodeFunctionResult"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\hooks\\useContractCall.ts"],"sourcesContent":["import { utils } from 'ethers'\nimport { useMemo } from 'react'\nimport { ChainId } from '../constants'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { Falsy } from '../model/types'\nimport { RawCall } from '../providers'\nimport { useChainCalls } from './useChainCalls'\nimport { useChainId } from './useChainId'\n\nfunction warnOnInvalidContractCall(call: ContractCall | Falsy) {\n  console.warn(\n    `Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`\n  )\n}\n\nfunction encodeCallData(call: ContractCall | Falsy, chainId: ChainId): RawCall | Falsy {\n  if (!call) {\n    return undefined\n  }\n  if (!call.address || !call.method) {\n    warnOnInvalidContractCall(call)\n    return undefined\n  }\n  try {\n    return { address: call.address, data: call.abi.encodeFunctionData(call.method, call.args), chainId }\n  } catch {\n    warnOnInvalidContractCall(call)\n    return undefined\n  }\n}\n\n/**\n * Represents a single call to a contract that can be included in multicall.\n *\n * @public\n * @deprecated Use {@link useCall} instead.\n */\nexport interface ContractCall {\n  /**\n   * ABI of a contract, see [Interface](https://docs.ethers.io/v5/api/utils/abi/interface/)\n   */\n  abi: utils.Interface\n  /**\n   * address of a contract to call\n   */\n  address: string\n  /**\n   * function name\n   */\n  method: string\n  /**\n   * arguments for the function\n   */\n  args: any[]\n}\n\n/**\n * Makes a call to a specific contract and returns the value. The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for {@link useChainCall} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param call a single call to a contract, also see {@link ContractCall}.\n * @deprecated It is recommended to use {@link useCall} instead of this method as it is deprecated.\n * @returns the result of a call or undefined if call didn't return yet.\n */\nexport function useContractCall(call: ContractCall | Falsy, queryParams: QueryParams = {}): any[] | undefined {\n  return useContractCalls([call], queryParams)[0]\n}\n\n/**\n * Makes calls to specific contracts and returns values. The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for {@link useChainCalls} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param calls a list of contract calls , also see {@link ContractCall}.\n * @deprecated It is recommended to use {@link useCalls} instead of this method as it is deprecated.\n * @returns array of results. Undefined if call didn't return yet.\n */\nexport function useContractCalls(\n  calls: (ContractCall | Falsy)[],\n  queryParams: QueryParams = {}\n): (any[] | undefined)[] {\n  const chainId = useChainId({ queryParams })\n\n  const rawCalls = useMemo(\n    () => calls.map((call) => (chainId !== undefined ? encodeCallData(call, chainId) : undefined)),\n    [\n      JSON.stringify(\n        calls.map((call) => call && { address: call.address?.toLowerCase(), method: call.method, args: call.args })\n      ),\n      chainId,\n    ]\n  )\n\n  const results = useChainCalls(rawCalls)\n\n  return useMemo(\n    () =>\n      results.map((result, idx) => {\n        const call = calls[idx]\n        if (result === '0x') {\n          warnOnInvalidContractCall(call)\n          return undefined\n        }\n        return call && result ? (call.abi.decodeFunctionResult(call.method, result) as any[]) : undefined\n      }),\n    [JSON.stringify(results)]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}