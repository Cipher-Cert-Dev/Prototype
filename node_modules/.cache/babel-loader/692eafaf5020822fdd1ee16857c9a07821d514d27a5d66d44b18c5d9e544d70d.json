{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice() {\n  var _updateGasPrice;\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _useEthers = useEthers(),\n    library = _useEthers.library;\n  var providers = useReadonlyNetworks();\n  var _blockNumber = useBlockNumber();\n  var blockNumbers = useBlockNumbers();\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    gasPrice = _useState2[0],\n    setGasPrice = _useState2[1];\n  var chainId = queryParams.chainId;\n  var _useMemo = useMemo(function () {\n      return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n    }, [providers, library, blockNumbers, _blockNumber]),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    provider = _useMemo2[0],\n    blockNumber = _useMemo2[1];\n  function updateGasPrice() {\n    return (_updateGasPrice = _updateGasPrice || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setGasPrice;\n            _context.next = 3;\n            return provider === null || provider === void 0 ? void 0 : provider.getGasPrice();\n          case 3:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))).apply(this, arguments);\n  }\n  useEffect(function () {\n    void updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumber","useBlockNumbers","useGasPrice","_updateGasPrice","queryParams","arguments","length","undefined","_useEthers","library","providers","_blockNumber","blockNumbers","_useState","_useState2","_slicedToArray","gasPrice","setGasPrice","chainId","_useMemo","_useMemo2","provider","blockNumber","updateGasPrice","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","t0","getGasPrice","t1","sent","stop","apply"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\hooks\\useGasPrice.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumber, useBlockNumbers } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\n\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice(queryParams: QueryParams = {}): BigNumber | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [gasPrice, setGasPrice] = useState<BigNumber | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber]\n  )\n\n  async function updateGasPrice() {\n    setGasPrice(await provider?.getGasPrice())\n  }\n\n  useEffect(() => {\n    void updateGasPrice()\n  }, [provider, blockNumber])\n\n  return gasPrice\n}\n"],"mappings":";;;AACA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,cAAc,EAAEC,eAAe,QAAQ,UAAU;AAG1D;;;;;AAKA,OAAM,SAAUC,WAAWA,CAAA,EAA8B;EAAA,IAAAC,eAAA;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EACvD,IAAAG,UAAA,GAAoBV,SAAS,EAAE;IAAvBW,OAAO,GAAAD,UAAA,CAAPC,OAAO;EACf,IAAMC,SAAS,GAAGX,mBAAmB,EAAE;EACvC,IAAMY,YAAY,GAAGX,cAAc,EAAE;EACrC,IAAMY,YAAY,GAAGX,eAAe,EAAE;EAEtC,IAAAY,SAAA,GAAgChB,QAAQ,EAAyB;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1DG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAQI,OAAO,GAAKd,WAAW,CAAvBc,OAAO;EAEf,IAAAC,QAAA,GAAgCvB,OAAO,CACrC;MAAA,OAAOsB,OAAO,GAAG,CAACR,SAAS,CAACQ,OAAO,CAAC,EAAEN,YAAY,CAACM,OAAO,CAAC,CAAC,GAAG,CAACT,OAAO,EAAEE,YAAY,CAAC;IAAA,CAAC,EACvF,CAACD,SAAS,EAAED,OAAO,EAAEG,YAAY,EAAED,YAAY,CAAC,CACjD;IAAAS,SAAA,GAAAL,cAAA,CAAAI,QAAA;IAHME,QAAQ,GAAAD,SAAA;IAAEE,WAAW,GAAAF,SAAA;EAG3B,SAEcG,cAAcA,CAAA;IAAA,QAAApB,eAAA,GAAAA,eAAA,IAAAqB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA7B,SAAAC,QAAA;MAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAG,EAAA,GACEhB,WAAW;YAAAa,QAAA,CAAAE,IAAA;YAAA,OAAOX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEa,WAAW,EAAE;UAAA;YAAAJ,QAAA,CAAAK,EAAA,GAAAL,QAAA,CAAAM,IAAA;YAAA,IAAAN,QAAA,CAAAG,EAAA,EAAAH,QAAA,CAAAK,EAAA;UAAA;UAAA;YAAA,OAAAL,QAAA,CAAAO,IAAA;QAAA;MAAA,GAAAV,OAAA;IAAA,CAC1C,IAAAW,KAAA,OAAAjC,SAAA;EAAA;EAEDV,SAAS,CAAC,YAAK;IACb,KAAK4B,cAAc,EAAE;EACvB,CAAC,EAAE,CAACF,QAAQ,EAAEC,WAAW,CAAC,CAAC;EAE3B,OAAON,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}