{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport var ConnectorController = /*#__PURE__*/function (_activate, _deactivate, _switchNetwork) {\n  function ConnectorController(connector) {\n    var _this = this;\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n    _classCallCheck(this, ConnectorController);\n    this.connector = connector;\n    this.updated = new Event();\n    this.newBlock = new Event();\n    this.active = false;\n    this.accounts = [];\n    this.errors = [];\n    this._config = Object.assign({}, config);\n    this._connectorUnsubscribe = connector.update.on(function (_ref) {\n      var chainId = _ref.chainId,\n        accounts = _ref.accounts;\n      _this.chainId = chainId;\n      _this.accounts = accounts;\n      _this.emitUpdate();\n    });\n  }\n  _createClass(ConnectorController, [{\n    key: \"emitUpdate\",\n    value: function emitUpdate() {\n      this.updated.emit({\n        active: this.active,\n        chainId: this.chainId,\n        accounts: this.accounts,\n        blockNumber: this.blockNumber,\n        errors: this.errors\n      });\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {\n      this._config = Object.assign(Object.assign({}, this._config), config);\n    }\n  }, {\n    key: \"getProvider\",\n    value: function getProvider() {\n      return this.connector.provider;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      return (_activate = _activate || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var connectorActivator,\n          provider,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connectorActivator = _args.length > 0 && _args[0] !== undefined ? _args[0] : function (connector) {\n                return connector.activate();\n              };\n              _context.next = 3;\n              return connectorActivator(this.connector);\n            case 3:\n              provider = this.getProvider();\n              if (provider) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error('Failed to activate connector');\n            case 6:\n              this.clearSubscriptions = subscribeToProviderEvents(this.connector, function (_ref2) {\n                var chainId = _ref2.chainId,\n                  accounts = _ref2.accounts;\n                if (chainId !== undefined) {\n                  _this2.chainId = chainId;\n                }\n                if (accounts !== undefined) {\n                  _this2.accounts = accounts;\n                }\n                _this2.emitUpdate();\n              }, function () {\n                if (_this2.connector instanceof MetamaskConnector && _this2._config.noMetamaskDeactivate) {\n                  return;\n                }\n                void _this2.deactivate();\n              });\n              _context.next = 9;\n              return provider.getBlockNumber();\n            case 9:\n              this.blockNumber = _context.sent;\n              this.newBlock.emit(this.blockNumber);\n              this.removeBlockEffect = this.newBlock.addEffect(function () {\n                var listener = function listener(blockNumber) {\n                  _this2.blockNumber = blockNumber;\n                  _this2.newBlock.emit(blockNumber);\n                  _this2.emitUpdate();\n                };\n                provider.on('block', listener);\n                return function () {\n                  provider.off('block', listener);\n                };\n              });\n              this.active = true;\n              this.emitUpdate();\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return (_deactivate = _deactivate || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, _b, _c;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.active = false;\n              (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n              (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n              (_c = this._connectorUnsubscribe) === null || _c === void 0 ? void 0 : _c.call(this);\n              _context2.next = 6;\n              return this.connector.deactivate();\n            case 6:\n              this.chainId = undefined;\n              this.accounts = [];\n              this.blockNumber = undefined;\n              this.errors = [];\n              this.emitUpdate();\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"switchNetwork\",\n    value: function switchNetwork(_x) {\n      return (_switchNetwork = _switchNetwork || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(chainId) {\n        var _a, provider, errChainNotAddedYet, chain;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              provider = this.getProvider();\n              validateArguments({\n                chainId: chainId\n              }, {\n                chainId: 'number'\n              });\n              if (provider) {\n                _context3.next = 4;\n                break;\n              }\n              throw new Error('Connector not initialized');\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return provider.send('wallet_switchEthereumChain', [{\n                chainId: \"0x\".concat(chainId.toString(16))\n              }]);\n            case 7:\n              _context3.next = 23;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](4);\n              errChainNotAddedYet = 4902; // Metamask error code\n              if (!(_context3.t0.code === errChainNotAddedYet)) {\n                _context3.next = 22;\n                break;\n              }\n              chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find(function (chain) {\n                return chain.chainId === chainId;\n              });\n              if (chain) {\n                _context3.next = 16;\n                break;\n              }\n              throw new Error(\"ChainId \\\"\".concat(chainId, \"\\\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks\"));\n            case 16:\n              if (chain.rpcUrl) {\n                _context3.next = 18;\n                break;\n              }\n              throw new Error(\"ChainId \\\"\".concat(chainId, \"\\\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks\"));\n            case 18:\n              _context3.next = 20;\n              return provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n            case 20:\n              _context3.next = 23;\n              break;\n            case 22:\n              throw _context3.t0;\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 9]]);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"reportError\",\n    value: function reportError(error) {\n      this.errors.push(error);\n      this.emitUpdate();\n    }\n  }]);\n  return ConnectorController;\n}();","map":{"version":3,"names":["DEFAULT_SUPPORTED_CHAINS","subscribeToProviderEvents","Event","getAddNetworkParams","validateArguments","DEFAULT_CONFIG","MetamaskConnector","ConnectorController","_activate","_deactivate","_switchNetwork","connector","_this","config","arguments","length","undefined","_classCallCheck","updated","newBlock","active","accounts","errors","_config","Object","assign","_connectorUnsubscribe","update","on","_ref","chainId","emitUpdate","_createClass","key","value","emit","blockNumber","updateConfig","getProvider","provider","activate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","connectorActivator","_args","wrap","_callee$","_context","prev","next","Error","clearSubscriptions","_ref2","noMetamaskDeactivate","deactivate","getBlockNumber","sent","removeBlockEffect","addEffect","listener","off","stop","apply","_callee2","_a","_b","_c","_callee2$","_context2","call","switchNetwork","_x","_callee3","errChainNotAddedYet","chain","_callee3$","_context3","send","concat","toString","t0","code","networks","find","rpcUrl","reportError","error","push"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\network\\connectors\\connectorController.ts"],"sourcesContent":["import { providers } from 'ethers'\nimport { DEFAULT_SUPPORTED_CHAINS, FullConfig } from '../../../constants'\nimport { subscribeToProviderEvents } from '../../../helpers'\nimport { Event } from '../../../helpers/event'\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams'\nimport { validateArguments } from '../../../helpers/validateArgument'\nimport { DEFAULT_CONFIG } from '../../../model/config/default'\nimport { Connector } from './connector'\nimport { MetamaskConnector } from './implementations'\n\nexport interface ControllerUpdateInfo {\n  active: ConnectorController['active']\n  accounts: ConnectorController['accounts']\n  chainId: ConnectorController['chainId']\n  blockNumber: ConnectorController['blockNumber']\n  errors: ConnectorController['errors']\n}\n\nexport class ConnectorController {\n  readonly updated = new Event<ControllerUpdateInfo>()\n  readonly newBlock = new Event<number>()\n\n  public active = false\n  public accounts: string[] = []\n  public chainId: number | undefined\n  public blockNumber: number | undefined\n  public errors: Error[] = []\n\n  private _config: FullConfig\n  private _connectorUnsubscribe: () => void | undefined\n\n  private emitUpdate() {\n    this.updated.emit({\n      active: this.active,\n      chainId: this.chainId,\n      accounts: this.accounts,\n      blockNumber: this.blockNumber,\n      errors: this.errors,\n    })\n  }\n\n  public updateConfig(config: Partial<FullConfig>) {\n    this._config = {\n      ...this._config,\n      ...config,\n    }\n  }\n\n  private removeBlockEffect?: () => void\n  private clearSubscriptions?: () => void\n\n  constructor(public readonly connector: Connector, config: FullConfig = DEFAULT_CONFIG) {\n    this._config = { ...config }\n    this._connectorUnsubscribe = connector.update.on(({ chainId, accounts }) => {\n      this.chainId = chainId\n      this.accounts = accounts\n      this.emitUpdate()\n    })\n  }\n\n  getProvider(): providers.Web3Provider | providers.JsonRpcProvider | undefined {\n    return this.connector.provider\n  }\n\n  async activate(connectorActivator = (connector: Connector) => connector.activate()) {\n    await connectorActivator(this.connector)\n    const provider = this.getProvider()\n    if (!provider) {\n      throw new Error('Failed to activate connector')\n    }\n\n    this.clearSubscriptions = subscribeToProviderEvents(\n      this.connector,\n      ({ chainId, accounts }) => {\n        if (chainId !== undefined) {\n          this.chainId = chainId\n        }\n        if (accounts !== undefined) {\n          this.accounts = accounts\n        }\n        this.emitUpdate()\n      },\n      () => {\n        if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n          return\n        }\n        void this.deactivate()\n      }\n    )\n\n    this.blockNumber = await provider.getBlockNumber()\n    this.newBlock.emit(this.blockNumber)\n    this.removeBlockEffect = this.newBlock.addEffect(() => {\n      const listener = (blockNumber: number) => {\n        this.blockNumber = blockNumber\n        this.newBlock.emit(blockNumber)\n        this.emitUpdate()\n      }\n\n      provider.on('block', listener)\n\n      return () => {\n        provider.off('block', listener)\n      }\n    })\n\n    this.active = true\n    this.emitUpdate()\n  }\n\n  async deactivate() {\n    this.active = false\n    this.removeBlockEffect?.()\n    this.clearSubscriptions?.()\n    this._connectorUnsubscribe?.()\n    await this.connector.deactivate()\n    this.chainId = undefined\n    this.accounts = []\n    this.blockNumber = undefined\n    this.errors = []\n    this.emitUpdate()\n  }\n\n  async switchNetwork(chainId: number) {\n    const provider = this.getProvider()\n\n    validateArguments({ chainId }, { chainId: 'number' })\n\n    if (!provider) {\n      throw new Error('Connector not initialized')\n    }\n\n    try {\n      await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }])\n    } catch (error: any) {\n      const errChainNotAddedYet = 4902 // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = (this._config.networks ?? DEFAULT_SUPPORTED_CHAINS).find((chain) => chain.chainId === chainId)\n        if (!chain)\n          throw new Error(\n            `ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`\n          )\n        if (!chain.rpcUrl)\n          throw new Error(\n            `ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`\n          )\n        await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)])\n      } else {\n        throw error\n      }\n    }\n  }\n\n  reportError(error: Error) {\n    this.errors.push(error)\n    this.emitUpdate()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}