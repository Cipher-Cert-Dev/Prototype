{"ast":null,"code":"import { createContext, useContext } from 'react';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport var MultiChainStatesContext = createContext({\n  chains: {},\n  dispatchCalls: function dispatchCalls() {\n    return undefined;\n  }\n});\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useMultiChainStates() {\n  return useContext(MultiChainStatesContext);\n}","map":{"version":3,"names":["createContext","useContext","MultiChainStatesContext","chains","dispatchCalls","undefined","useMultiChainStates"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\multiChainStates\\context.ts"],"sourcesContent":["import { createContext, useContext } from 'react'\nimport { Action, ChainState } from '..'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport interface SingleChainState {\n  value?: {\n    blockNumber: number\n    state?: ChainState\n    error?: unknown\n  }\n  multicallAddress: string | undefined\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type MultiChainState = {\n  [chainId in number]?: SingleChainState\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport const MultiChainStatesContext = createContext<{\n  chains: MultiChainState\n  dispatchCalls: (action: Action) => void\n}>({\n  chains: {},\n  dispatchCalls: () => undefined,\n})\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useMultiChainStates() {\n  return useContext(MultiChainStatesContext)\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAsBjD;;;AAGA,OAAO,IAAMC,uBAAuB,GAAGF,aAAa,CAGjD;EACDG,MAAM,EAAE,EAAE;EACVC,aAAa,EAAE,SAAAA,cAAA;IAAA,OAAMC,SAAS;EAAA;CAC/B,CAAC;AAEF;;;AAGA,OAAM,SAAUC,mBAAmBA,CAAA;EACjC,OAAOL,UAAU,CAACC,uBAAuB,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}