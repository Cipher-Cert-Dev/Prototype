{"ast":null,"code":"import _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair(first, second, delay) {\n  var _useState = useState([first, second]),\n    _useState2 = _slicedToArray(_useState, 2),\n    debouncedValue = _useState2[0],\n    setDebouncedValue = _useState2[1];\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue([first, second]);\n    }, delay);\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [first, second, delay]);\n  return debouncedValue;\n}","map":{"version":3,"names":["useEffect","useState","useDebouncePair","first","second","delay","_useState","_useState2","_slicedToArray","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\hooks\\useDebouncePair.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair<T, U>(first: T, second: U, delay: number): [T, U] {\n  const [debouncedValue, setDebouncedValue] = useState<[T, U]>([first, second])\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue([first, second])\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [first, second, delay])\n\n  return debouncedValue\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C;;;;;;;;;;;AAWA,OAAM,SAAUC,eAAeA,CAAOC,KAAQ,EAAEC,MAAS,EAAEC,KAAa;EACtE,IAAAC,SAAA,GAA4CL,QAAQ,CAAS,CAACE,KAAK,EAAEC,MAAM,CAAC,CAAC;IAAAG,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtEG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAExCP,SAAS,CAAC,YAAK;IACb;IACA,IAAMW,OAAO,GAAGC,UAAU,CAAC,YAAK;MAC9BF,iBAAiB,CAAC,CAACP,KAAK,EAAEC,MAAM,CAAC,CAAC;IACpC,CAAC,EAAEC,KAAK,CAAC;IAET;IACA;IACA;IACA,OAAO,YAAK;MACVQ,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACR,KAAK,EAAEC,MAAM,EAAEC,KAAK,CAAC,CAAC;EAE1B,OAAOI,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}