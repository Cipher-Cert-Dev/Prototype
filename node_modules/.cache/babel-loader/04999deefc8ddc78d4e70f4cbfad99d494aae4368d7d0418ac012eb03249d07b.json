{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'ADD_CALLS') {\n    return [].concat(_toConsumableArray(state), _toConsumableArray(action.calls.map(function (call) {\n      return Object.assign(Object.assign({}, call), {\n        address: call.address.toLowerCase()\n      });\n    })));\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(function (call) {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n      var blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    var finalState = state;\n    var _iterator = _createForOfIteratorHelper(action.calls),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var call = _step.value;\n        var index = finalState.findIndex(function (x) {\n          return x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data;\n        });\n        if (index !== -1) {\n          finalState = finalState.filter(function (_, i) {\n            return i !== index;\n          });\n        }\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return finalState;\n  }\n}","map":{"version":3,"names":["callsReducer","state","arguments","length","undefined","action","type","concat","_toConsumableArray","calls","map","call","Object","assign","address","toLowerCase","chainId","updatedCalls","includes","blockNumber","lastUpdatedBlockNumber","finalState","_iterator","_createForOfIteratorHelper","_step","_loop","value","index","findIndex","x","data","filter","_","i","s","n","done","err","e","f"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\callsReducer.ts"],"sourcesContent":["import { ChainId } from '../../..'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type Action = AddCall | RemoveCall | UpdateCall\n\n/**\n * Represents a single call on the blockchain that can be included in multicall.\n *\n * @public\n */\nexport interface RawCall {\n  /**\n   * address of a contract to call\n   */\n  address: string\n  /**\n   * calldata of the call that encodes function call\n   */\n  data: string\n  /**\n   * chain id of the chain to perform the call on\n   */\n  chainId: ChainId\n  /**\n   * Whether the call is static (not expected to change between calls). Used for optimizations.\n   */\n  isStatic?: boolean\n  /**\n   * number of last updated block\n   */\n  lastUpdatedBlockNumber?: number\n  /**\n   * number of blocks to wait before updating the call\n   */\n  refreshPerBlocks?: number\n}\n\n/**\n * @deprecated It's recommended to use RawCall instead\n * @internal Intended for internal use - use it on your own risk\n */\nexport interface ChainCall {\n  chainId?: ChainId\n  address: string\n  data: string\n}\n\ninterface AddCall {\n  type: 'ADD_CALLS'\n  calls: RawCall[]\n}\n\ninterface UpdateCall {\n  type: 'UPDATE_CALLS'\n  calls: RawCall[]\n  updatedCalls: RawCall[]\n  blockNumber: number\n  chainId: number\n}\n\ninterface RemoveCall {\n  type: 'REMOVE_CALLS'\n  calls: RawCall[]\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state: RawCall[] = [], action: Action) {\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map((call) => ({ ...call, address: call.address.toLowerCase() }))]\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map((call) => {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call\n      }\n      const blockNumber = action.blockNumber\n      return { ...call, lastUpdatedBlockNumber: blockNumber }\n    })\n  } else {\n    let finalState = state\n    for (const call of action.calls) {\n      const index = finalState.findIndex(\n        (x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data\n      )\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index)\n      }\n    }\n    return finalState\n  }\n}\n"],"mappings":";;AAmEA;;;AAGA,OAAM,SAAUA,YAAYA,CAAA,EAAsC;EAAA,IAArCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,EAAE;EAAA,IAAEG,MAAc,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChE,IAAIC,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,UAAAC,MAAA,CAAAC,kBAAA,CAAWP,KAAK,GAAAO,kBAAA,CAAKH,MAAM,CAACI,KAAK,CAACC,GAAG,CAAC,UAACC,IAAI;MAAA,OAAKC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMF,IAAI;QAAEG,OAAO,EAAEH,IAAI,CAACG,OAAO,CAACC,WAAW;MAAE;IAAA,CAAG,CAAC;GACpG,MAAM,IAAIV,MAAM,CAACC,IAAI,KAAK,cAAc,EAAE;IACzC,OAAOL,KAAK,CAACS,GAAG,CAAC,UAACC,IAAI,EAAI;MACxB,IAAIA,IAAI,CAACK,OAAO,KAAKX,MAAM,CAACW,OAAO,IAAI,CAACX,MAAM,CAACY,YAAY,CAACC,QAAQ,CAACP,IAAI,CAAC,EAAE;QAC1E,OAAOA,IAAI;;MAEb,IAAMQ,WAAW,GAAGd,MAAM,CAACc,WAAW;MACtC,OAAAP,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYF,IAAI;QAAES,sBAAsB,EAAED;MAAW;IACvD,CAAC,CAAC;GACH,MAAM;IACL,IAAIE,UAAU,GAAGpB,KAAK;IAAA,IAAAqB,SAAA,GAAAC,0BAAA,CACHlB,MAAM,CAACI,KAAK;MAAAe,KAAA;IAAA;MAAA,IAAAC,KAAA,YAAAA,MAAA,EAAE;QAAA,IAAtBd,IAAI,GAAAa,KAAA,CAAAE,KAAA;QACb,IAAMC,KAAK,GAAGN,UAAU,CAACO,SAAS,CAChC,UAACC,CAAC;UAAA,OAAKA,CAAC,CAACf,OAAO,CAACC,WAAW,EAAE,KAAKJ,IAAI,CAACG,OAAO,CAACC,WAAW,EAAE,IAAIc,CAAC,CAACC,IAAI,KAAKnB,IAAI,CAACmB,IAAI;QAAA,EACtF;QACD,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBN,UAAU,GAAGA,UAAU,CAACU,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;YAAA,OAAKA,CAAC,KAAKN,KAAK;UAAA,EAAC;;OAExD;MAPD,KAAAL,SAAA,CAAAY,CAAA,MAAAV,KAAA,GAAAF,SAAA,CAAAa,CAAA,IAAAC,IAAA;QAAAX,KAAA;MAAA;IAOC,SAAAY,GAAA;MAAAf,SAAA,CAAAgB,CAAA,CAAAD,GAAA;IAAA;MAAAf,SAAA,CAAAiB,CAAA;IAAA;IACD,OAAOlB,UAAU;;AAErB"},"metadata":{},"sourceType":"module","externalDependencies":[]}