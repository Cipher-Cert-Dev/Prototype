{"ast":null,"code":"import _slicedToArray from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { useIsMounted } from '../../hooks/useIsMounted';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  var children = _ref.children;\n  var _useReducer = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    notifications = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var isMounted = useIsMounted();\n  var _useEthers = useEthers(),\n    chainId = _useEthers.chainId,\n    account = _useEthers.account;\n  useEffect(function () {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  var addNotification = useCallback(function (_ref2) {\n    var notification = _ref2.notification,\n      chainId = _ref2.chainId;\n    if (isMounted()) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: Object.assign(Object.assign({}, notification), {\n          id: nanoid()\n        })\n      });\n    }\n  }, [dispatch]);\n  var removeNotification = useCallback(function (_ref3) {\n    var notificationId = _ref3.notificationId,\n      chainId = _ref3.chainId;\n    if (isMounted()) {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId: chainId,\n        notificationId: notificationId\n      });\n    }\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification: addNotification,\n      notifications: notifications,\n      removeNotification: removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"names":["useCallback","useEffect","useReducer","useEthers","NotificationsContext","DEFAULT_NOTIFICATIONS","notificationReducer","useIsMounted","nanoid","NotificationsProvider","_ref","children","_useReducer","_useReducer2","_slicedToArray","notifications","dispatch","isMounted","_useEthers","chainId","account","type","notification","id","submittedAt","Date","now","address","addNotification","_ref2","Object","assign","removeNotification","_ref3","notificationId","_jsx","Provider","value"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\notifications\\provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers } from '../../hooks'\nimport { NotificationsContext } from './context'\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\nimport { notificationReducer } from './reducer'\nimport { useIsMounted } from '../../hooks/useIsMounted'\nimport { nanoid } from 'nanoid'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function NotificationsProvider({ children }: Props) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\n  const isMounted = useIsMounted()\n  const { chainId, account } = useEthers()\n\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account,\n        },\n      })\n    }\n  }, [account, chainId])\n\n  const addNotification = useCallback(\n    ({ notification, chainId }: AddNotificationPayload) => {\n      if (isMounted()) {\n        dispatch({\n          type: 'ADD_NOTIFICATION',\n          chainId,\n          notification: { ...notification, id: nanoid() },\n        })\n      }\n    },\n    [dispatch]\n  )\n\n  const removeNotification = useCallback(\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\n      if (isMounted()) {\n        dispatch({\n          type: 'REMOVE_NOTIFICATION',\n          chainId,\n          notificationId,\n        })\n      }\n    },\n    [dispatch]\n  )\n\n  return (\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\n  )\n}\n"],"mappings":";;AAAA,SAAoBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACrE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,oBAAoB,QAAQ,WAAW;AAChD,SAAiCC,qBAAqB,QAAmC,SAAS;AAClG,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,MAAM,QAAQ,QAAQ;AAM/B,OAAM,SAAUC,qBAAqBA,CAAAC,IAAA,EAAoB;EAAA,IAAjBC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAC9C,IAAAC,WAAA,GAAkCV,UAAU,CAACI,mBAAmB,EAAED,qBAAqB,CAAC;IAAAQ,YAAA,GAAAC,cAAA,CAAAF,WAAA;IAAjFG,aAAa,GAAAF,YAAA;IAAEG,QAAQ,GAAAH,YAAA;EAC9B,IAAMI,SAAS,GAAGV,YAAY,EAAE;EAChC,IAAAW,UAAA,GAA6Bf,SAAS,EAAE;IAAhCgB,OAAO,GAAAD,UAAA,CAAPC,OAAO;IAAEC,OAAO,GAAAF,UAAA,CAAPE,OAAO;EAExBnB,SAAS,CAAC,YAAK;IACb,IAAImB,OAAO,IAAID,OAAO,EAAE;MACtBH,QAAQ,CAAC;QACPK,IAAI,EAAE,kBAAkB;QACxBF,OAAO,EAAEA,OAAO;QAChBG,YAAY,EAAE;UACZD,IAAI,EAAE,iBAAiB;UACvBE,EAAE,EAAEf,MAAM,EAAE;UACZgB,WAAW,EAAEC,IAAI,CAACC,GAAG,EAAE;UACvBC,OAAO,EAAEP;;OAEZ,CAAC;;EAEN,CAAC,EAAE,CAACA,OAAO,EAAED,OAAO,CAAC,CAAC;EAEtB,IAAMS,eAAe,GAAG5B,WAAW,CACjC,UAAA6B,KAAA,EAAsD;IAAA,IAAnDP,YAAY,GAAAO,KAAA,CAAZP,YAAY;MAAEH,OAAO,GAAAU,KAAA,CAAPV,OAAO;IACtB,IAAIF,SAAS,EAAE,EAAE;MACfD,QAAQ,CAAC;QACPK,IAAI,EAAE,kBAAkB;QACxBF,OAAO,EAAPA,OAAO;QACPG,YAAY,EAAAQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOT,YAAY;UAAEC,EAAE,EAAEf,MAAM;QAAE;OAC9C,CAAC;;EAEN,CAAC,EACD,CAACQ,QAAQ,CAAC,CACX;EAED,IAAMgB,kBAAkB,GAAGhC,WAAW,CACpC,UAAAiC,KAAA,EAA2D;IAAA,IAAxDC,cAAc,GAAAD,KAAA,CAAdC,cAAc;MAAEf,OAAO,GAAAc,KAAA,CAAPd,OAAO;IACxB,IAAIF,SAAS,EAAE,EAAE;MACfD,QAAQ,CAAC;QACPK,IAAI,EAAE,qBAAqB;QAC3BF,OAAO,EAAPA,OAAO;QACPe,cAAc,EAAdA;OACD,CAAC;;EAEN,CAAC,EACD,CAAClB,QAAQ,CAAC,CACX;EAED,OACEmB,IAAA,CAAC/B,oBAAoB,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAAET,eAAe,EAAfA,eAAe;MAAEb,aAAa,EAAbA,aAAa;MAAEiB,kBAAkB,EAAlBA;IAAkB,CAAE;IAAErB,QAAQ,EAAEA;EAAQ,EAAI;AAExH"},"metadata":{},"sourceType":"module","externalDependencies":[]}