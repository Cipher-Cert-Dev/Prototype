{"ast":null,"code":"// number of bytes in the hext string - '0x' at the start doesn't count\n// each two characters are one byte\nexport var buffLength = function buffLength(buf) {\n  return (buf.length - 2) / 2;\n};\n// length of the buffer padded to the nearest 32 bytes\nexport var bufPaddedLength = function bufPaddedLength(buf) {\n  return Math.ceil(buffLength(buf) / 32) * 32;\n};\nexport var encodeUint = function encodeUint(uint) {\n  return uint.toString(16).padStart(64, '0');\n};\nexport var decodeUint = function decodeUint(buf) {\n  return parseInt(buf, 16);\n};\n// word length in characters - 32 bytes = 64 characters\nexport var wordLength = 64;\nexport var fail = function fail() {\n  throw new Error('Invalid calldata');\n};","map":{"version":3,"names":["buffLength","buf","length","bufPaddedLength","Math","ceil","encodeUint","uint","toString","padStart","decodeUint","parseInt","wordLength","fail","Error"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\abi\\common.ts"],"sourcesContent":["// number of bytes in the hext string - '0x' at the start doesn't count\n// each two characters are one byte\nexport const buffLength = (buf: string) => (buf.length - 2) / 2\n// length of the buffer padded to the nearest 32 bytes\nexport const bufPaddedLength = (buf: string) => Math.ceil(buffLength(buf) / 32) * 32\nexport const encodeUint = (uint: number) => uint.toString(16).padStart(64, '0')\nexport const decodeUint = (buf: string) => parseInt(buf, 16)\n// word length in characters - 32 bytes = 64 characters\nexport const wordLength = 64\nexport const fail = () => {\n  throw new Error('Invalid calldata')\n}\n"],"mappings":"AAAA;AACA;AACA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAUA,CAAIC,GAAW;EAAA,OAAK,CAACA,GAAG,CAACC,MAAM,GAAG,CAAC,IAAI,CAAC;AAAA;AAC/D;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIF,GAAW;EAAA,OAAKG,IAAI,CAACC,IAAI,CAACL,UAAU,CAACC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;AAAA;AACpF,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAY;EAAA,OAAKA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC;AAAA;AAC/E,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIT,GAAW;EAAA,OAAKU,QAAQ,CAACV,GAAG,EAAE,EAAE,CAAC;AAAA;AAC5D;AACA,OAAO,IAAMW,UAAU,GAAG,EAAE;AAC5B,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAQ;EACvB,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;AACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}