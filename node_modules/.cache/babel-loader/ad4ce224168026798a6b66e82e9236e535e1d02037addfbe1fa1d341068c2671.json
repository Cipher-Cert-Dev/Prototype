{"ast":null,"code":"import _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { providers } from 'ethers';\nimport { useConfig } from '../../../hooks';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { networkStatesReducer } from './reducer';\nimport { useWindow } from '../../window';\nimport { isWebSocketProvider } from '../../../helpers';\nvar Provider = providers.Provider,\n  StaticJsonRpcProvider = providers.StaticJsonRpcProvider;\nvar getProviderFromConfig = function getProviderFromConfig(urlOrProviderOrProviderFunction) {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction;\n  }\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction();\n  }\n  return new StaticJsonRpcProvider(urlOrProviderOrProviderFunction);\n};\nexport var getProvidersFromConfig = function getProvidersFromConfig(readOnlyUrls) {\n  return fromEntries(Object.entries(readOnlyUrls).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      chainId = _ref2[0],\n      urlOrProviderOrProviderFunction = _ref2[1];\n    return [chainId, getProviderFromConfig(urlOrProviderOrProviderFunction)];\n  }));\n};\nexport function ReadonlyNetworksProvider(_ref3) {\n  var _ref3$providerOverrid = _ref3.providerOverrides,\n    providerOverrides = _ref3$providerOverrid === void 0 ? {} : _ref3$providerOverrid,\n    children = _ref3.children;\n  var _useConfig = useConfig(),\n    _useConfig$readOnlyUr = _useConfig.readOnlyUrls,\n    readOnlyUrls = _useConfig$readOnlyUr === void 0 ? {} : _useConfig$readOnlyUr,\n    pollingInterval = _useConfig.pollingInterval,\n    pollingIntervals = _useConfig.pollingIntervals;\n  var isActive = useWindow();\n  var _useState = useState(function () {\n      return Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides);\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    providers = _useState2[0],\n    setProviders = _useState2[1];\n  var _useReducer = useReducer(networkStatesReducer, Object.assign({}, fromEntries(Object.keys(Object.assign(Object.assign({}, readOnlyUrls), providerOverrides)).map(function (chainId) {\n      return [chainId, {\n        errors: []\n      }];\n    })))),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    networkStates = _useReducer2[0],\n    dispatchNetworkState = _useReducer2[1];\n  var getPollingInterval = useCallback(function (chainId) {\n    var _a;\n    return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval;\n  }, [pollingInterval, pollingIntervals]);\n  useEffect(function () {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, Object.entries(readOnlyUrls).flat());\n  useEffect(function () {\n    for (var _i = 0, _Object$entries = Object.entries(readOnlyUrls); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),\n        chainId = _Object$entries$_i[0];\n      var provider = providers[chainId];\n      if (provider && !isWebSocketProvider(provider)) {\n        provider.polling = isActive;\n      }\n    }\n  }, [isActive, providers, readOnlyUrls]);\n  useEffect(function () {\n    for (var _i2 = 0, _Object$entries2 = Object.entries(providers); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        chainId = _Object$entries2$_i[0],\n        provider = _Object$entries2$_i[1];\n      if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(Number(chainId));\n      }\n    }\n  }, [providers, getPollingInterval]);\n  var networks = useMemo(function () {\n    return {\n      providers: providers,\n      updateNetworkState: dispatchNetworkState,\n      networkStates: networkStates\n    };\n  }, [providers, dispatchNetworkState, networkStates]);\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: networks\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useReducer","useState","providers","useConfig","ReadonlyNetworksContext","fromEntries","networkStatesReducer","useWindow","isWebSocketProvider","Provider","StaticJsonRpcProvider","getProviderFromConfig","urlOrProviderOrProviderFunction","isProvider","getProvidersFromConfig","readOnlyUrls","Object","entries","map","_ref","_ref2","_slicedToArray","chainId","ReadonlyNetworksProvider","_ref3","_ref3$providerOverrid","providerOverrides","children","_useConfig","_useConfig$readOnlyUr","pollingInterval","pollingIntervals","isActive","_useState","assign","_useState2","setProviders","_useReducer","keys","errors","_useReducer2","networkStates","dispatchNetworkState","getPollingInterval","_a","flat","_i","_Object$entries","length","_Object$entries$_i","provider","polling","_i2","_Object$entries2","_Object$entries2$_i","Number","networks","updateNetworkState","_jsx","value"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\network\\readonlyNetworks\\provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useMemo, useReducer, useState } from 'react'\nimport { providers } from 'ethers'\nimport { useConfig } from '../../../hooks'\nimport { Providers } from './model'\nimport { ReadonlyNetworksContext } from './context'\nimport { BaseProviderFactory, ChainId, NodeUrls } from '../../../constants'\nimport { fromEntries } from '../../../helpers/fromEntries'\nimport { networkStatesReducer } from './reducer'\nimport { useWindow } from '../../window'\nimport { isWebSocketProvider } from '../../../helpers'\n\nconst { Provider, StaticJsonRpcProvider } = providers\ntype BaseProvider = providers.BaseProvider\n\ninterface NetworkProviderProps {\n  providerOverrides?: Providers\n  children?: ReactNode\n}\n\nconst getProviderFromConfig = (urlOrProviderOrProviderFunction: string | BaseProvider | BaseProviderFactory) => {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction\n  }\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction()\n  }\n  return new StaticJsonRpcProvider(urlOrProviderOrProviderFunction)\n}\n\nexport const getProvidersFromConfig = (readOnlyUrls: NodeUrls) =>\n  fromEntries(\n    Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [\n      chainId,\n      getProviderFromConfig(urlOrProviderOrProviderFunction),\n    ])\n  )\n\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }: NetworkProviderProps) {\n  const { readOnlyUrls = {}, pollingInterval, pollingIntervals } = useConfig()\n  const isActive = useWindow()\n  const [providers, setProviders] = useState<Providers>(() => ({\n    ...getProvidersFromConfig(readOnlyUrls),\n    ...providerOverrides,\n  }))\n  const [networkStates, dispatchNetworkState] = useReducer(networkStatesReducer, {\n    ...fromEntries(Object.keys({ ...readOnlyUrls, ...providerOverrides }).map((chainId) => [chainId, { errors: [] }])),\n  })\n  const getPollingInterval = useCallback((chainId: number) => pollingIntervals?.[chainId] ?? pollingInterval, [\n    pollingInterval,\n    pollingIntervals,\n  ])\n\n  useEffect(() => {\n    setProviders({ ...getProvidersFromConfig(readOnlyUrls), ...providerOverrides })\n  }, Object.entries(readOnlyUrls).flat())\n\n  useEffect(() => {\n    for (const [chainId] of Object.entries(readOnlyUrls)) {\n      const provider = providers[(chainId as unknown) as ChainId]\n      if (provider && !isWebSocketProvider(provider)) {\n        provider.polling = isActive\n      }\n    }\n  }, [isActive, providers, readOnlyUrls])\n\n  useEffect(() => {\n    for (const [chainId, provider] of Object.entries(providers)) {\n      if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(Number(chainId))\n      }\n    }\n  }, [providers, getPollingInterval])\n\n  const networks = useMemo(\n    () => ({\n      providers,\n      updateNetworkState: dispatchNetworkState,\n      networkStates,\n    }),\n    [providers, dispatchNetworkState, networkStates]\n  )\n\n  return <ReadonlyNetworksContext.Provider value={networks}>{children}</ReadonlyNetworksContext.Provider>\n}\n"],"mappings":";;AAAA,SAAoBA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACxF,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,SAASC,uBAAuB,QAAQ,WAAW;AAEnD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,oBAAoB,QAAQ,WAAW;AAChD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,mBAAmB,QAAQ,kBAAkB;AAEtD,IAAQC,QAAQ,GAA4BP,SAAS,CAA7CO,QAAQ;EAAEC,qBAAqB,GAAKR,SAAS,CAAnCQ,qBAAqB;AAQvC,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,+BAA4E,EAAI;EAC7G,IAAIH,QAAQ,CAACI,UAAU,CAACD,+BAA+B,CAAC,EAAE;IACxD,OAAOA,+BAA+B;;EAExC,IAAI,OAAOA,+BAA+B,KAAK,UAAU,EAAE;IACzD,OAAOA,+BAA+B,EAAE;;EAE1C,OAAO,IAAIF,qBAAqB,CAACE,+BAA+B,CAAC;AACnE,CAAC;AAED,OAAO,IAAME,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,YAAsB;EAAA,OAC3DV,WAAW,CACTW,MAAM,CAACC,OAAO,CAACF,YAAY,CAAC,CAACG,GAAG,CAAC,UAAAC,IAAA;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;MAAEG,OAAO,GAAAF,KAAA;MAAER,+BAA+B,GAAAQ,KAAA;IAAA,OAAM,CAC/EE,OAAO,EACPX,qBAAqB,CAACC,+BAA+B,CAAC,CACvD;EAAA,EAAC,CACH;AAAA;AAEH,OAAM,SAAUW,wBAAwBA,CAAAC,KAAA,EAA2D;EAAA,IAAAC,qBAAA,GAAAD,KAAA,CAAxDE,iBAAiB;IAAjBA,iBAAiB,GAAAD,qBAAA,cAAG,EAAE,GAAAA,qBAAA;IAAEE,QAAQ,GAAAH,KAAA,CAARG,QAAQ;EACzE,IAAAC,UAAA,GAAiEzB,SAAS,EAAE;IAAA0B,qBAAA,GAAAD,UAAA,CAApEb,YAAY;IAAZA,YAAY,GAAAc,qBAAA,cAAG,EAAE,GAAAA,qBAAA;IAAEC,eAAe,GAAAF,UAAA,CAAfE,eAAe;IAAEC,gBAAgB,GAAAH,UAAA,CAAhBG,gBAAgB;EAC5D,IAAMC,QAAQ,GAAGzB,SAAS,EAAE;EAC5B,IAAA0B,SAAA,GAAkChC,QAAQ,CAAY;MAAA,OAAMe,MAAA,CAAAkB,MAAA,CAAAlB,MAAA,CAAAkB,MAAA,KACvDpB,sBAAsB,CAACC,YAAY,CAAC,GACpCW,iBAAiB;IAAA,CACpB,CAAC;IAAAS,UAAA,GAAAd,cAAA,CAAAY,SAAA;IAHI/B,SAAS,GAAAiC,UAAA;IAAEC,YAAY,GAAAD,UAAA;EAI9B,IAAAE,WAAA,GAA8CrC,UAAU,CAACM,oBAAoB,EAAAU,MAAA,CAAAkB,MAAA,KACxE7B,WAAW,CAACW,MAAM,CAACsB,IAAI,CAAAtB,MAAA,CAAAkB,MAAA,CAAAlB,MAAA,CAAAkB,MAAA,KAAMnB,YAAY,GAAKW,iBAAiB,EAAG,CAACR,GAAG,CAAC,UAACI,OAAO;MAAA,OAAK,CAACA,OAAO,EAAE;QAAEiB,MAAM,EAAE;MAAE,CAAE,CAAC;IAAA,EAAC,CAAC,EAClH;IAAAC,YAAA,GAAAnB,cAAA,CAAAgB,WAAA;IAFKI,aAAa,GAAAD,YAAA;IAAEE,oBAAoB,GAAAF,YAAA;EAG1C,IAAMG,kBAAkB,GAAG9C,WAAW,CAAC,UAACyB,OAAe,EAAI;IAAA,IAAAsB,EAAA;IAAC,QAAAA,EAAA,GAAAb,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAGT,OAAO,CAAC,cAAAsB,EAAA,cAAAA,EAAA,GAAId,eAAe;EAAA,GAAE,CAC1GA,eAAe,EACfC,gBAAgB,CACjB,CAAC;EAEFjC,SAAS,CAAC,YAAK;IACbsC,YAAY,CAAApB,MAAA,CAAAkB,MAAA,CAAAlB,MAAA,CAAAkB,MAAA,KAAMpB,sBAAsB,CAACC,YAAY,CAAC,GAAKW,iBAAiB,EAAG;EACjF,CAAC,EAAEV,MAAM,CAACC,OAAO,CAACF,YAAY,CAAC,CAAC8B,IAAI,EAAE,CAAC;EAEvC/C,SAAS,CAAC,YAAK;IACb,SAAAgD,EAAA,MAAAC,eAAA,GAAwB/B,MAAM,CAACC,OAAO,CAACF,YAAY,CAAC,EAAA+B,EAAA,GAAAC,eAAA,CAAAC,MAAA,EAAAF,EAAA,IAAE;MAAjD,IAAAG,kBAAA,GAAA5B,cAAA,CAAA0B,eAAA,CAAAD,EAAA;QAAOxB,OAAO,GAAA2B,kBAAA;MACjB,IAAMC,QAAQ,GAAGhD,SAAS,CAAEoB,OAA8B,CAAC;MAC3D,IAAI4B,QAAQ,IAAI,CAAC1C,mBAAmB,CAAC0C,QAAQ,CAAC,EAAE;QAC9CA,QAAQ,CAACC,OAAO,GAAGnB,QAAQ;;;EAGjC,CAAC,EAAE,CAACA,QAAQ,EAAE9B,SAAS,EAAEa,YAAY,CAAC,CAAC;EAEvCjB,SAAS,CAAC,YAAK;IACb,SAAAsD,GAAA,MAAAC,gBAAA,GAAkCrC,MAAM,CAACC,OAAO,CAACf,SAAS,CAAC,EAAAkD,GAAA,GAAAC,gBAAA,CAAAL,MAAA,EAAAI,GAAA,IAAE;MAAxD,IAAAE,mBAAA,GAAAjC,cAAA,CAAAgC,gBAAA,CAAAD,GAAA;QAAO9B,OAAO,GAAAgC,mBAAA;QAAEJ,QAAQ,GAAAI,mBAAA;MAC3B,IAAI,CAAC9C,mBAAmB,CAAC0C,QAAQ,CAAC,EAAE;QAClCA,QAAQ,CAACpB,eAAe,GAAGa,kBAAkB,CAACY,MAAM,CAACjC,OAAO,CAAC,CAAC;;;EAGpE,CAAC,EAAE,CAACpB,SAAS,EAAEyC,kBAAkB,CAAC,CAAC;EAEnC,IAAMa,QAAQ,GAAGzD,OAAO,CACtB;IAAA,OAAO;MACLG,SAAS,EAATA,SAAS;MACTuD,kBAAkB,EAAEf,oBAAoB;MACxCD,aAAa,EAAbA;KACD;EAAA,CAAC,EACF,CAACvC,SAAS,EAAEwC,oBAAoB,EAAED,aAAa,CAAC,CACjD;EAED,OAAOiB,IAAA,CAACtD,uBAAuB,CAACK,QAAQ,EAAAO,MAAA,CAAAkB,MAAA;IAACyB,KAAK,EAAEH;EAAQ;IAAA7B,QAAA,EAAGA;EAAQ,GAAoC;AACzG"},"metadata":{},"sourceType":"module","externalDependencies":[]}