{"ast":null,"code":"import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns allowance (tokens left to use by spender) for given token owner - spender relationship.\n * @param tokenAddress address of a token contract\n * @param ownerAddress address of an account to which tokens are linked\n * @param spenderAddress address of an account allowed to spend tokens\n * @param queryParams see {@link QueryParams}.\n * @returns an allowance which is `BigNumber`, or `undefined` if any address or token is `Falsy` or not connected.\n * @public\n * @example\n * const TOKEN_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const SPENDER_ADDRESS = '0xA193E42526F1FEA8C99AF609dcEabf30C1c29fAA'\n * const { account, chainId } = useEthers()\n * const allowance = useTokenAllowance(TOKEN_ADDRESS, account, SPENDER_ADDRESS)\n *\n * return (\n *   {allowance && <p>Remaining allowance: {formatUnits(allowance, 18)} tokens</p>}\n * )\n */\nexport function useTokenAllowance(tokenAddress, ownerAddress, spenderAddress) {\n  var queryParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _a;\n  var _ref = (_a = useCall(ownerAddress && spenderAddress && tokenAddress && {\n      contract: new Contract(tokenAddress, ERC20Interface),\n      method: 'allowance',\n      args: [ownerAddress, spenderAddress]\n    }, queryParams)) !== null && _a !== void 0 ? _a : {},\n    allowance = _ref.value;\n  return allowance === null || allowance === void 0 ? void 0 : allowance[0];\n}","map":{"version":3,"names":["Contract","ERC20Interface","useCall","useTokenAllowance","tokenAddress","ownerAddress","spenderAddress","queryParams","arguments","length","undefined","_ref","_a","contract","method","args","allowance","value"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\hooks\\useTokenAllowance.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { Contract } from 'ethers'\nimport { ERC20Interface } from '../constants'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { Falsy } from '../model/types'\nimport { useCall } from './useCall'\n\n/**\n * Returns allowance (tokens left to use by spender) for given token owner - spender relationship.\n * @param tokenAddress address of a token contract\n * @param ownerAddress address of an account to which tokens are linked\n * @param spenderAddress address of an account allowed to spend tokens\n * @param queryParams see {@link QueryParams}.\n * @returns an allowance which is `BigNumber`, or `undefined` if any address or token is `Falsy` or not connected.\n * @public\n * @example\n * const TOKEN_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const SPENDER_ADDRESS = '0xA193E42526F1FEA8C99AF609dcEabf30C1c29fAA'\n * const { account, chainId } = useEthers()\n * const allowance = useTokenAllowance(TOKEN_ADDRESS, account, SPENDER_ADDRESS)\n *\n * return (\n *   {allowance && <p>Remaining allowance: {formatUnits(allowance, 18)} tokens</p>}\n * )\n */\nexport function useTokenAllowance(\n  tokenAddress: string | Falsy,\n  ownerAddress: string | Falsy,\n  spenderAddress: string | Falsy,\n  queryParams: QueryParams = {}\n): BigNumber | undefined {\n  const { value: allowance } =\n    useCall(\n      ownerAddress &&\n        spenderAddress &&\n        tokenAddress && {\n          contract: new Contract(tokenAddress, ERC20Interface),\n          method: 'allowance',\n          args: [ownerAddress, spenderAddress],\n        },\n      queryParams\n    ) ?? {}\n  return allowance?.[0]\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,QAAQ;AACjC,SAASC,cAAc,QAAQ,cAAc;AAG7C,SAASC,OAAO,QAAQ,WAAW;AAEnC;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,iBAAiBA,CAC/BC,YAA4B,EAC5BC,YAA4B,EAC5BC,cAA8B,EACD;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;;EAE7B,IAAAG,IAAA,GACE,CAAAC,EAAA,GAAAV,OAAO,CACLG,YAAY,IACVC,cAAc,IACdF,YAAY,IAAI;MACdS,QAAQ,EAAE,IAAIb,QAAQ,CAACI,YAAY,EAAEH,cAAc,CAAC;MACpDa,MAAM,EAAE,WAAW;MACnBC,IAAI,EAAE,CAACV,YAAY,EAAEC,cAAc;KACpC,EACHC,WAAW,CACZ,cAAAK,EAAA,cAAAA,EAAA,GAAI,EAAE;IAVMI,SAAS,GAAAL,IAAA,CAAhBM,KAAK;EAWb,OAAOD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,CAAC;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}