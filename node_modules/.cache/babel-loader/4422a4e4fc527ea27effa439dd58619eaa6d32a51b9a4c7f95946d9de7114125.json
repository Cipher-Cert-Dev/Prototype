{"ast":null,"code":"import _slicedToArray from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _getBrowserKey, _encrypt, _getPadding, _decrypt;\nimport { crypto as cr } from \"@noble/hashes/crypto\";\nimport { concatBytes, equalsBytes } from \"./utils.js\";\nvar crypto = {\n  web: cr\n};\nfunction validateOpt(key, iv, mode) {\n  if (!mode.startsWith(\"aes-\")) {\n    throw new Error(\"AES submodule doesn't support mode \".concat(mode));\n  }\n  if (iv.length !== 16) {\n    throw new Error(\"AES: wrong IV length\");\n  }\n  if (mode.startsWith(\"aes-128\") && key.length !== 16 || mode.startsWith(\"aes-256\") && key.length !== 32) {\n    throw new Error(\"AES: wrong key length\");\n  }\n}\nfunction getBrowserKey(_x, _x2, _x3) {\n  return (_getBrowserKey = _getBrowserKey || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(mode, key, iv) {\n    var keyMode, wKey;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (crypto.web) {\n            _context.next = 2;\n            break;\n          }\n          throw new Error(\"Browser crypto not available.\");\n        case 2:\n          if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n            keyMode = \"cbc\";\n          }\n          if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n            keyMode = \"ctr\";\n          }\n          if (keyMode) {\n            _context.next = 6;\n            break;\n          }\n          throw new Error(\"AES: unsupported mode\");\n        case 6:\n          _context.next = 8;\n          return crypto.web.subtle.importKey(\"raw\", key, {\n            name: \"AES-\".concat(keyMode.toUpperCase()),\n            length: key.length * 8\n          }, true, [\"encrypt\", \"decrypt\"]);\n        case 8:\n          wKey = _context.sent;\n          return _context.abrupt(\"return\", [wKey, {\n            name: \"aes-\".concat(keyMode),\n            iv: iv,\n            counter: iv,\n            length: 128\n          }]);\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }))).apply(this, arguments);\n}\nexport function encrypt(_x4, _x5, _x6) {\n  return (_encrypt = _encrypt || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(msg, key, iv) {\n    var mode,\n      pkcs7PaddingEnabled,\n      _yield$getBrowserKey,\n      _yield$getBrowserKey2,\n      wKey,\n      wOpt,\n      cipher,\n      res,\n      _cipher,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          mode = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : \"aes-128-ctr\";\n          pkcs7PaddingEnabled = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : true;\n          validateOpt(key, iv, mode);\n          if (!crypto.web) {\n            _context2.next = 18;\n            break;\n          }\n          _context2.next = 6;\n          return getBrowserKey(mode, key, iv);\n        case 6:\n          _yield$getBrowserKey = _context2.sent;\n          _yield$getBrowserKey2 = _slicedToArray(_yield$getBrowserKey, 2);\n          wKey = _yield$getBrowserKey2[0];\n          wOpt = _yield$getBrowserKey2[1];\n          _context2.next = 12;\n          return crypto.web.subtle.encrypt(wOpt, wKey, msg);\n        case 12:\n          cipher = _context2.sent;\n          // Remove PKCS7 padding on cbc mode by stripping end of message\n          res = new Uint8Array(cipher);\n          if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n            res = res.slice(0, -16);\n          }\n          return _context2.abrupt(\"return\", res);\n        case 18:\n          if (!crypto.node) {\n            _context2.next = 24;\n            break;\n          }\n          _cipher = crypto.node.createCipheriv(mode, key, iv);\n          _cipher.setAutoPadding(pkcs7PaddingEnabled);\n          return _context2.abrupt(\"return\", concatBytes(_cipher.update(msg), _cipher.final()));\n        case 24:\n          throw new Error(\"The environment doesn't have AES module\");\n        case 25:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }))).apply(this, arguments);\n}\nfunction getPadding(_x7, _x8, _x9, _x10) {\n  return (_getPadding = _getPadding || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(cypherText, key, iv, mode) {\n    var lastBlock, i, res;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          lastBlock = cypherText.slice(-16);\n          for (i = 0; i < 16; i++) {\n            // Undo xor of iv and fill with lastBlock ^ padding (16)\n            lastBlock[i] ^= iv[i] ^ 16;\n          }\n          _context3.next = 4;\n          return encrypt(lastBlock, key, iv, mode);\n        case 4:\n          res = _context3.sent;\n          return _context3.abrupt(\"return\", res.slice(0, 16));\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }))).apply(this, arguments);\n}\nexport function decrypt(_x11, _x12, _x13) {\n  return (_decrypt = _decrypt || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(cypherText, key, iv) {\n    var mode,\n      pkcs7PaddingEnabled,\n      _yield$getBrowserKey3,\n      _yield$getBrowserKey4,\n      wKey,\n      wOpt,\n      padding,\n      msg,\n      msgBytes,\n      encrypted,\n      decipher,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          mode = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : \"aes-128-ctr\";\n          pkcs7PaddingEnabled = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : true;\n          validateOpt(key, iv, mode);\n          if (!crypto.web) {\n            _context4.next = 28;\n            break;\n          }\n          _context4.next = 6;\n          return getBrowserKey(mode, key, iv);\n        case 6:\n          _yield$getBrowserKey3 = _context4.sent;\n          _yield$getBrowserKey4 = _slicedToArray(_yield$getBrowserKey3, 2);\n          wKey = _yield$getBrowserKey4[0];\n          wOpt = _yield$getBrowserKey4[1];\n          if (!(!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\")) {\n            _context4.next = 15;\n            break;\n          }\n          _context4.next = 13;\n          return getPadding(cypherText, key, iv, mode);\n        case 13:\n          padding = _context4.sent;\n          cypherText = concatBytes(cypherText, padding);\n        case 15:\n          _context4.next = 17;\n          return crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n        case 17:\n          msg = _context4.sent;\n          msgBytes = new Uint8Array(msg); // Safari always ignores padding (if no padding -> broken message)\n          if (!(wOpt.name === \"aes-cbc\")) {\n            _context4.next = 25;\n            break;\n          }\n          _context4.next = 22;\n          return encrypt(msgBytes, key, iv, mode);\n        case 22:\n          encrypted = _context4.sent;\n          if (equalsBytes(encrypted, cypherText)) {\n            _context4.next = 25;\n            break;\n          }\n          throw new Error(\"AES: wrong padding\");\n        case 25:\n          return _context4.abrupt(\"return\", msgBytes);\n        case 28:\n          if (!crypto.node) {\n            _context4.next = 34;\n            break;\n          }\n          decipher = crypto.node.createDecipheriv(mode, key, iv);\n          decipher.setAutoPadding(pkcs7PaddingEnabled);\n          return _context4.abrupt(\"return\", concatBytes(decipher.update(cypherText), decipher.final()));\n        case 34:\n          throw new Error(\"The environment doesn't have AES module\");\n        case 35:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }))).apply(this, arguments);\n}","map":{"version":3,"names":["crypto","cr","concatBytes","equalsBytes","web","validateOpt","key","iv","mode","startsWith","Error","concat","length","getBrowserKey","_x","_x2","_x3","_getBrowserKey","_asyncToGenerator","_regeneratorRuntime","mark","_callee","keyMode","wKey","wrap","_callee$","_context","prev","next","includes","subtle","importKey","name","toUpperCase","sent","abrupt","counter","stop","apply","arguments","encrypt","_x4","_x5","_x6","_encrypt","_callee2","msg","pkcs7PaddingEnabled","_yield$getBrowserKey","_yield$getBrowserKey2","wOpt","cipher","res","_cipher","_args2","_callee2$","_context2","undefined","_slicedToArray","Uint8Array","slice","node","createCipheriv","setAutoPadding","update","final","getPadding","_x7","_x8","_x9","_x10","_getPadding","_callee3","cypherText","lastBlock","i","_callee3$","_context3","decrypt","_x11","_x12","_x13","_decrypt","_callee4","_yield$getBrowserKey3","_yield$getBrowserKey4","padding","msgBytes","encrypted","decipher","_args4","_callee4$","_context4","createDecipheriv"],"sources":["D:/CC/test/node_modules/ethereum-cryptography/esm/aes.js"],"sourcesContent":["import { crypto as cr } from \"@noble/hashes/crypto\";\nimport { concatBytes, equalsBytes } from \"./utils.js\";\nconst crypto = { web: cr };\nfunction validateOpt(key, iv, mode) {\n    if (!mode.startsWith(\"aes-\")) {\n        throw new Error(`AES submodule doesn't support mode ${mode}`);\n    }\n    if (iv.length !== 16) {\n        throw new Error(\"AES: wrong IV length\");\n    }\n    if ((mode.startsWith(\"aes-128\") && key.length !== 16) ||\n        (mode.startsWith(\"aes-256\") && key.length !== 32)) {\n        throw new Error(\"AES: wrong key length\");\n    }\n}\nasync function getBrowserKey(mode, key, iv) {\n    if (!crypto.web) {\n        throw new Error(\"Browser crypto not available.\");\n    }\n    let keyMode;\n    if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n        keyMode = \"cbc\";\n    }\n    if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n        keyMode = \"ctr\";\n    }\n    if (!keyMode) {\n        throw new Error(\"AES: unsupported mode\");\n    }\n    const wKey = await crypto.web.subtle.importKey(\"raw\", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, [\"encrypt\", \"decrypt\"]);\n    // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n    // recommended by NIST SP800-38A\n    return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];\n}\nexport async function encrypt(msg, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);\n        // Remove PKCS7 padding on cbc mode by stripping end of message\n        let res = new Uint8Array(cipher);\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n            res = res.slice(0, -16);\n        }\n        return res;\n    }\n    else if (crypto.node) {\n        const cipher = crypto.node.createCipheriv(mode, key, iv);\n        cipher.setAutoPadding(pkcs7PaddingEnabled);\n        return concatBytes(cipher.update(msg), cipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\nasync function getPadding(cypherText, key, iv, mode) {\n    const lastBlock = cypherText.slice(-16);\n    for (let i = 0; i < 16; i++) {\n        // Undo xor of iv and fill with lastBlock ^ padding (16)\n        lastBlock[i] ^= iv[i] ^ 16;\n    }\n    const res = await encrypt(lastBlock, key, iv, mode);\n    return res.slice(0, 16);\n}\nexport async function decrypt(cypherText, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        // Add empty padding so Chrome will correctly decrypt message\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n            const padding = await getPadding(cypherText, key, iv, mode);\n            cypherText = concatBytes(cypherText, padding);\n        }\n        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n        const msgBytes = new Uint8Array(msg);\n        // Safari always ignores padding (if no padding -> broken message)\n        if (wOpt.name === \"aes-cbc\") {\n            const encrypted = await encrypt(msgBytes, key, iv, mode);\n            if (!equalsBytes(encrypted, cypherText)) {\n                throw new Error(\"AES: wrong padding\");\n            }\n        }\n        return msgBytes;\n    }\n    else if (crypto.node) {\n        const decipher = crypto.node.createDecipheriv(mode, key, iv);\n        decipher.setAutoPadding(pkcs7PaddingEnabled);\n        return concatBytes(decipher.update(cypherText), decipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}