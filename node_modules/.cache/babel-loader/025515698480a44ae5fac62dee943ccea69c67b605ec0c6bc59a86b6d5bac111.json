{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _multicall, _fastEncodingMulticall;\nimport { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nvar ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\nexport var multicall1Factory = function multicall1Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall : multicall;\n};\n/**\n * @public\n */\nexport function multicall(_x, _x2, _x3, _x4) {\n  return (_multicall = _multicall || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, _yield$contract$aggre, _yield$contract$aggre2, results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(requests.length === 0)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", {});\n        case 2:\n          contract = new Contract(address, ABI, provider);\n          _context.next = 5;\n          return contract.aggregate(requests.map(function (_ref) {\n            var address = _ref.address,\n              data = _ref.data;\n            return [address, data];\n          }), {\n            blockTag: blockNumber\n          });\n        case 5:\n          _yield$contract$aggre = _context.sent;\n          _yield$contract$aggre2 = _slicedToArray(_yield$contract$aggre, 2);\n          results = _yield$contract$aggre2[1];\n          return _context.abrupt(\"return\", decodeResult(results, requests));\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }))).apply(this, arguments);\n}\n/**\n * @public\n */\nexport function fastEncodingMulticall(_x5, _x6, _x7, _x8) {\n  return (_fastEncodingMulticall = _fastEncodingMulticall || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeAggregate, _decodeAggregate2, results;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(requests.length === 0)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", {});\n        case 2:\n          _context2.next = 4;\n          return provider.call({\n            to: address,\n            data: encodeAggregate(requests.map(function (_ref2) {\n              var address = _ref2.address,\n                data = _ref2.data;\n              return [address, data];\n            }))\n          }, blockNumber);\n        case 4:\n          response = _context2.sent;\n          _decodeAggregate = decodeAggregate(response), _decodeAggregate2 = _slicedToArray(_decodeAggregate, 2), results = _decodeAggregate2[1];\n          return _context2.abrupt(\"return\", decodeResult(results, requests));\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }))).apply(this, arguments);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  var state = {};\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n      address = _requests$i.address,\n      data = _requests$i.data;\n    var result = results[i];\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}","map":{"version":3,"names":["Contract","encodeAggregate","decodeAggregate","ABI","multicall1Factory","fastEncoding","fastEncodingMulticall","multicall","_x","_x2","_x3","_x4","_multicall","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","address","blockNumber","requests","contract","_yield$contract$aggre","_yield$contract$aggre2","results","wrap","_callee$","_context","prev","next","length","abrupt","aggregate","map","_ref","data","blockTag","sent","_slicedToArray","decodeResult","stop","apply","arguments","_x5","_x6","_x7","_x8","_fastEncodingMulticall","_callee2","response","_decodeAggregate","_decodeAggregate2","_callee2$","_context2","call","to","_ref2","state","i","_requests$i","result","stateForAddress","_a","value","success"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\multicall.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { Contract } from 'ethers'\nimport type { providers } from 'ethers'\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n]\n\n/**\n * @public\n */\nexport const multicall1Factory = (fastEncoding: boolean) => (fastEncoding ? fastEncodingMulticall : multicall)\n\n/**\n * @public\n */\nexport async function multicall(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const [, results]: [BigNumber, string[]] = await contract.aggregate(\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  return decodeResult(results, requests)\n}\n\n/**\n * @public\n */\nexport async function fastEncodingMulticall(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const response = await provider.call(\n    {\n      to: address,\n      data: encodeAggregate(requests.map(({ address, data }) => [address, data])),\n    },\n    blockNumber\n  )\n  const [, results] = decodeAggregate(response)\n  return decodeResult(results, requests)\n}\n\nfunction decodeResult(results: string[], requests: RawCall[]) {\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const result = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { value: result, success: true }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}