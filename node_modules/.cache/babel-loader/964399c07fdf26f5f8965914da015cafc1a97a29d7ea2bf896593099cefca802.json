{"ast":null,"code":"import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n  if (uniqueCalls.length === 0) {\n    return;\n  }\n  var start = Date.now();\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls).then(function (state) {\n    dispatchState({\n      type: 'FETCH_SUCCESS',\n      blockNumber: blockNumber,\n      chainId: chainId,\n      state: state\n    });\n    notifyDevtools({\n      type: 'MULTICALL_SUCCESS',\n      duration: Date.now() - start,\n      chainId: chainId,\n      blockNumber: blockNumber,\n      multicallAddress: multicallAddress,\n      state: state\n    });\n  }).catch(function (error) {\n    reportError(error);\n    dispatchState({\n      type: 'FETCH_ERROR',\n      blockNumber: blockNumber,\n      chainId: chainId,\n      error: error\n    });\n    notifyDevtools({\n      type: 'MULTICALL_ERROR',\n      duration: Date.now() - start,\n      chainId: chainId,\n      blockNumber: blockNumber,\n      multicallAddress: multicallAddress,\n      calls: uniqueCalls,\n      error: error\n    });\n  });\n}","map":{"version":3,"names":["notifyDevtools","performMulticall","provider","multicallExecutor","multicallAddress","blockNumber","uniqueCalls","dispatchState","chainId","reportError","length","start","Date","now","then","state","type","duration","catch","error","calls"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\performMulticall.ts"],"sourcesContent":["import { providers } from 'ethers'\nimport { RawCall } from './callsReducer'\nimport { Dispatch } from 'react'\nimport { ChainStateAction } from './chainStateReducer'\nimport { ChainId } from '../../../constants'\nimport { notifyDevtools } from '../../devtools'\n\nexport function performMulticall(\n  provider: providers.BaseProvider,\n  multicallExecutor: (\n    provider: providers.BaseProvider,\n    multicallAddress: string,\n    blockNumber: number,\n    uniqueCalls: RawCall[]\n  ) => Promise<any>,\n  multicallAddress: string,\n  blockNumber: number,\n  uniqueCalls: RawCall[],\n  dispatchState: Dispatch<ChainStateAction>,\n  chainId: ChainId,\n  reportError: (error: Error) => void\n) {\n  if (uniqueCalls.length === 0) {\n    return\n  }\n\n  const start = Date.now()\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls)\n    .then((state) => {\n      dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state })\n      notifyDevtools({\n        type: 'MULTICALL_SUCCESS',\n        duration: Date.now() - start,\n        chainId,\n        blockNumber,\n        multicallAddress,\n        state,\n      })\n    })\n    .catch((error) => {\n      reportError(error)\n      dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error })\n      notifyDevtools({\n        type: 'MULTICALL_ERROR',\n        duration: Date.now() - start,\n        chainId,\n        blockNumber,\n        multicallAddress,\n        calls: uniqueCalls,\n        error,\n      })\n    })\n}\n"],"mappings":"AAKA,SAASA,cAAc,QAAQ,gBAAgB;AAE/C,OAAM,SAAUC,gBAAgBA,CAC9BC,QAAgC,EAChCC,iBAKiB,EACjBC,gBAAwB,EACxBC,WAAmB,EACnBC,WAAsB,EACtBC,aAAyC,EACzCC,OAAgB,EAChBC,WAAmC;EAEnC,IAAIH,WAAW,CAACI,MAAM,KAAK,CAAC,EAAE;IAC5B;;EAGF,IAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,EAAE;EACxBV,iBAAiB,CAACD,QAAQ,EAAEE,gBAAgB,EAAEC,WAAW,EAAEC,WAAW,CAAC,CACpEQ,IAAI,CAAC,UAACC,KAAK,EAAI;IACdR,aAAa,CAAC;MAAES,IAAI,EAAE,eAAe;MAAEX,WAAW,EAAXA,WAAW;MAAEG,OAAO,EAAPA,OAAO;MAAEO,KAAK,EAALA;IAAK,CAAE,CAAC;IACrEf,cAAc,CAAC;MACbgB,IAAI,EAAE,mBAAmB;MACzBC,QAAQ,EAAEL,IAAI,CAACC,GAAG,EAAE,GAAGF,KAAK;MAC5BH,OAAO,EAAPA,OAAO;MACPH,WAAW,EAAXA,WAAW;MACXD,gBAAgB,EAAhBA,gBAAgB;MAChBW,KAAK,EAALA;KACD,CAAC;EACJ,CAAC,CAAC,CACDG,KAAK,CAAC,UAACC,KAAK,EAAI;IACfV,WAAW,CAACU,KAAK,CAAC;IAClBZ,aAAa,CAAC;MAAES,IAAI,EAAE,aAAa;MAAEX,WAAW,EAAXA,WAAW;MAAEG,OAAO,EAAPA,OAAO;MAAEW,KAAK,EAALA;IAAK,CAAE,CAAC;IACnEnB,cAAc,CAAC;MACbgB,IAAI,EAAE,iBAAiB;MACvBC,QAAQ,EAAEL,IAAI,CAACC,GAAG,EAAE,GAAGF,KAAK;MAC5BH,OAAO,EAAPA,OAAO;MACPH,WAAW,EAAXA,WAAW;MACXD,gBAAgB,EAAhBA,gBAAgB;MAChBgB,KAAK,EAAEd,WAAW;MAClBa,KAAK,EAALA;KACD,CAAC;EACJ,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}