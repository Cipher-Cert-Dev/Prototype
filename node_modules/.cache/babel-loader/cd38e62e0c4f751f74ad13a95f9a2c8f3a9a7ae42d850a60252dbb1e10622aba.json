{"ast":null,"code":"import _slicedToArray from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\n// modified from https://usehooks.com/useDebounce/\n/**\n * Debounce a value of type T.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n * @param value variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns debounced value\n *\n * @example\n * const [someValue, setValue] = useState(...)\n * const debouncedValue = useDebounce(value, 1000)\n */\nexport function useDebounce(value, delay) {\n  var _useState = useState(value),\n    _useState2 = _slicedToArray(_useState, 2),\n    debouncedValue = _useState2[0],\n    setDebouncedValue = _useState2[1];\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay);\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}","map":{"version":3,"names":["useEffect","useState","useDebounce","value","delay","_useState","_useState2","_slicedToArray","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\hooks\\useDebounce.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\n/**\n * Debounce a value of type T.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n * @param value variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns debounced value\n *\n * @example\n * const [someValue, setValue] = useState(...)\n * const debouncedValue = useDebounce(value, 1000)\n */\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C;AACA;;;;;;;;;;;;AAYA,OAAM,SAAUC,WAAWA,CAAIC,KAAQ,EAAEC,KAAa;EACpD,IAAAC,SAAA,GAA4CJ,QAAQ,CAAIE,KAAK,CAAC;IAAAG,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAExCN,SAAS,CAAC,YAAK;IACb;IACA,IAAMU,OAAO,GAAGC,UAAU,CAAC,YAAK;MAC9BF,iBAAiB,CAACN,KAAK,CAAC;IAC1B,CAAC,EAAEC,KAAK,CAAC;IAET;IACA;IACA;IACA,OAAO,YAAK;MACVQ,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACP,KAAK,EAAEC,KAAK,CAAC,CAAC;EAElB,OAAOI,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}