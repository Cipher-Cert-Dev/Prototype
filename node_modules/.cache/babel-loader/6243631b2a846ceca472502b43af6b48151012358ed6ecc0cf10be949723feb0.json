{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/CC/test/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(filter) {\n  var _updateLogs;\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _useEthers = useEthers(),\n    library = _useEthers.library;\n  var providers = useReadonlyNetworks();\n  var _blockNumber = useBlockNumber();\n  var blockNumbers = useBlockNumbers();\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    logs = _useState2[0],\n    setLogs = _useState2[1];\n  var chainId = queryParams.chainId;\n  var _useMemo = useMemo(function () {\n      return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n    }, [providers, library, blockNumbers, _blockNumber, chainId]),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    provider = _useMemo2[0],\n    blockNumber = _useMemo2[1];\n  function updateLogs() {\n    return (_updateLogs = _updateLogs || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setLogs;\n            if (filter) {\n              _context.next = 5;\n              break;\n            }\n            _context.t1 = undefined;\n            _context.next = 8;\n            break;\n          case 5:\n            _context.next = 7;\n            return provider === null || provider === void 0 ? void 0 : provider.getLogs(filter);\n          case 7:\n            _context.t1 = _context.sent;\n          case 8:\n            _context.t2 = _context.t1;\n            (0, _context.t0)(_context.t2);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))).apply(this, arguments);\n  }\n  useEffect(function () {\n    void updateLogs();\n  }, [provider, blockNumber]);\n  return logs;\n}","map":{"version":3,"names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumbers","useBlockNumber","useRawLogs","filter","_updateLogs","queryParams","arguments","length","undefined","_useEthers","library","providers","_blockNumber","blockNumbers","_useState","_useState2","_slicedToArray","logs","setLogs","chainId","_useMemo","_useMemo2","provider","blockNumber","updateLogs","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","t0","t1","getLogs","sent","t2","stop","apply"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\hooks\\useRawLogs.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumbers, useBlockNumber } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport type { Filter, FilterByBlockHash, Log } from '@ethersproject/abstract-provider'\nimport { Falsy } from '../model/types'\n\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash> | Falsy,\n  queryParams: QueryParams = {}\n): Log[] | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [logs, setLogs] = useState<Log[] | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber, chainId]\n  )\n\n  async function updateLogs() {\n    setLogs(!filter ? undefined : await provider?.getLogs(filter))\n  }\n\n  useEffect(() => {\n    void updateLogs()\n  }, [provider, blockNumber])\n\n  return logs\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,eAAe,EAAEC,cAAc,QAAQ,UAAU;AAK1D;;;;;;;;;AASA,OAAM,SAAUC,UAAUA,CACxBC,MAAgF,EACnD;EAAA,IAAAC,WAAA;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EAE7B,IAAAG,UAAA,GAAoBX,SAAS,EAAE;IAAvBY,OAAO,GAAAD,UAAA,CAAPC,OAAO;EACf,IAAMC,SAAS,GAAGZ,mBAAmB,EAAE;EACvC,IAAMa,YAAY,GAAGX,cAAc,EAAE;EACrC,IAAMY,YAAY,GAAGb,eAAe,EAAE;EAEtC,IAAAc,SAAA,GAAwBjB,QAAQ,EAAqB;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAQI,OAAO,GAAKd,WAAW,CAAvBc,OAAO;EAEf,IAAAC,QAAA,GAAgCxB,OAAO,CACrC;MAAA,OAAOuB,OAAO,GAAG,CAACR,SAAS,CAACQ,OAAO,CAAC,EAAEN,YAAY,CAACM,OAAO,CAAC,CAAC,GAAG,CAACT,OAAO,EAAEE,YAAY,CAAC;IAAA,CAAC,EACvF,CAACD,SAAS,EAAED,OAAO,EAAEG,YAAY,EAAED,YAAY,EAAEO,OAAO,CAAC,CAC1D;IAAAE,SAAA,GAAAL,cAAA,CAAAI,QAAA;IAHME,QAAQ,GAAAD,SAAA;IAAEE,WAAW,GAAAF,SAAA;EAG3B,SAEcG,UAAUA,CAAA;IAAA,QAAApB,WAAA,GAAAA,WAAA,IAAAqB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAzB,SAAAC,QAAA;MAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAG,EAAA,GACEhB,OAAO;YAAA,IAAEf,MAAM;cAAA4B,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAI,EAAA,GAAG3B,SAAS;YAAAuB,QAAA,CAAAE,IAAA;YAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAASX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEc,OAAO,CAACjC,MAAM,CAAC;UAAA;YAAA4B,QAAA,CAAAI,EAAA,GAAAJ,QAAA,CAAAM,IAAA;UAAA;YAAAN,QAAA,CAAAO,EAAA,GAAAP,QAAA,CAAAI,EAAA;YAAA,IAAAJ,QAAA,CAAAG,EAAA,EAAAH,QAAA,CAAAO,EAAA;UAAA;UAAA;YAAA,OAAAP,QAAA,CAAAQ,IAAA;QAAA;MAAA,GAAAX,OAAA;IAAA,CAC9D,IAAAY,KAAA,OAAAlC,SAAA;EAAA;EAEDX,SAAS,CAAC,YAAK;IACb,KAAK6B,UAAU,EAAE;EACnB,CAAC,EAAE,CAACF,QAAQ,EAAEC,WAAW,CAAC,CAAC;EAE3B,OAAON,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}