{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n  var timeFromCreation = function timeFromCreation(creationTime) {\n    return Date.now() - creationTime;\n  };\n  return notifications.filter(function (notification) {\n    return timeFromCreation(notification.submittedAt) >= expirationPeriod;\n  });\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  var _useEthers = useEthers(),\n    chainId = _useEthers.chainId,\n    account = _useEthers.account;\n  var _useNotificationsCont = useNotificationsContext(),\n    addNotification = _useNotificationsCont.addNotification,\n    notifications = _useNotificationsCont.notifications,\n    removeNotification = _useNotificationsCont.removeNotification;\n  var _useConfig = useConfig(),\n    _useConfig$notificati = _useConfig.notifications,\n    checkInterval = _useConfig$notificati.checkInterval,\n    expirationPeriod = _useConfig$notificati.expirationPeriod;\n  var chainNotifications = useMemo(function () {\n    var _a;\n    if (chainId === undefined || !account) {\n      return [];\n    }\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(function () {\n    if (!chainId) {\n      return;\n    }\n    var expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n    var _iterator = _createForOfIteratorHelper(expiredNotification),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var notification = _step.value;\n        removeNotification({\n          notificationId: notification.id,\n          chainId: chainId\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification: addNotification,\n    removeNotification: removeNotification\n  };\n}","map":{"version":3,"names":["useMemo","useNotificationsContext","useEthers","useInterval","useConfig","getExpiredNotifications","notifications","expirationPeriod","timeFromCreation","creationTime","Date","now","filter","notification","submittedAt","useNotifications","_useEthers","chainId","account","_useNotificationsCont","addNotification","removeNotification","_useConfig","_useConfig$notificati","checkInterval","chainNotifications","undefined","_a","expiredNotification","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","notificationId","id","err","e","f"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\hooks\\useNotifications.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Notification, useNotificationsContext } from '../providers'\nimport { useEthers } from './useEthers'\nimport { useInterval } from './useInterval'\nimport { useConfig } from '../hooks'\n\nfunction getExpiredNotifications(notifications: Notification[], expirationPeriod: number) {\n  if (expirationPeriod === 0) {\n    return []\n  }\n  const timeFromCreation = (creationTime: number) => Date.now() - creationTime\n\n  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod)\n}\n\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  const { chainId, account } = useEthers()\n  const { addNotification, notifications, removeNotification } = useNotificationsContext()\n  const {\n    notifications: { checkInterval, expirationPeriod },\n  } = useConfig()\n\n  const chainNotifications = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return notifications[chainId] ?? []\n  }, [notifications, chainId, account])\n\n  useInterval(() => {\n    if (!chainId) {\n      return\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod)\n    for (const notification of expiredNotification) {\n      removeNotification({ notificationId: notification.id, chainId })\n    }\n  }, checkInterval)\n\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification,\n  }\n}\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAAuBC,uBAAuB,QAAQ,cAAc;AACpE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,UAAU;AAEpC,SAASC,uBAAuBA,CAACC,aAA6B,EAAEC,gBAAwB;EACtF,IAAIA,gBAAgB,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;;EAEX,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,YAAoB;IAAA,OAAKC,IAAI,CAACC,GAAG,EAAE,GAAGF,YAAY;EAAA;EAE5E,OAAOH,aAAa,CAACM,MAAM,CAAC,UAACC,YAAY;IAAA,OAAKL,gBAAgB,CAACK,YAAY,CAACC,WAAW,CAAC,IAAIP,gBAAgB;EAAA,EAAC;AAC/G;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAM,SAAUQ,gBAAgBA,CAAA;EAC9B,IAAAC,UAAA,GAA6Bd,SAAS,EAAE;IAAhCe,OAAO,GAAAD,UAAA,CAAPC,OAAO;IAAEC,OAAO,GAAAF,UAAA,CAAPE,OAAO;EACxB,IAAAC,qBAAA,GAA+DlB,uBAAuB,EAAE;IAAhFmB,eAAe,GAAAD,qBAAA,CAAfC,eAAe;IAAEd,aAAa,GAAAa,qBAAA,CAAbb,aAAa;IAAEe,kBAAkB,GAAAF,qBAAA,CAAlBE,kBAAkB;EAC1D,IAAAC,UAAA,GAEIlB,SAAS,EAAE;IAAAmB,qBAAA,GAAAD,UAAA,CADbhB,aAAa;IAAIkB,aAAa,GAAAD,qBAAA,CAAbC,aAAa;IAAEjB,gBAAgB,GAAAgB,qBAAA,CAAhBhB,gBAAgB;EAGlD,IAAMkB,kBAAkB,GAAGzB,OAAO,CAAC,YAAK;;IACtC,IAAIiB,OAAO,KAAKS,SAAS,IAAI,CAACR,OAAO,EAAE;MACrC,OAAO,EAAE;;IAEX,OAAO,CAAAS,EAAA,GAAArB,aAAa,CAACW,OAAO,CAAC,cAAAU,EAAA,cAAAA,EAAA,GAAI,EAAE;EACrC,CAAC,EAAE,CAACrB,aAAa,EAAEW,OAAO,EAAEC,OAAO,CAAC,CAAC;EAErCf,WAAW,CAAC,YAAK;IACf,IAAI,CAACc,OAAO,EAAE;MACZ;;IAGF,IAAMW,mBAAmB,GAAGvB,uBAAuB,CAACoB,kBAAkB,EAAElB,gBAAgB,CAAC;IAAA,IAAAsB,SAAA,GAAAC,0BAAA,CAC9DF,mBAAmB;MAAAG,KAAA;IAAA;MAA9C,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAgD;QAAA,IAArCrB,YAAY,GAAAkB,KAAA,CAAAI,KAAA;QACrBd,kBAAkB,CAAC;UAAEe,cAAc,EAAEvB,YAAY,CAACwB,EAAE;UAAEpB,OAAO,EAAPA;QAAO,CAAE,CAAC;;IACjE,SAAAqB,GAAA;MAAAT,SAAA,CAAAU,CAAA,CAAAD,GAAA;IAAA;MAAAT,SAAA,CAAAW,CAAA;IAAA;EACH,CAAC,EAAEhB,aAAa,CAAC;EAEjB,OAAO;IACLlB,aAAa,EAAEmB,kBAAkB;IACjCL,eAAe,EAAfA,eAAe;IACfC,kBAAkB,EAAlBA;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}