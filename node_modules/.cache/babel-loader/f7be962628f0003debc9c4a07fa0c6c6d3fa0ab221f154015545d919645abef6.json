{"ast":null,"code":"import { useConnector } from '../providers/network/connectors';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/TrueFiEng/useDApp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n  var _useConnector = useConnector(),\n    account = _useConnector.account,\n    library = _useConnector.library,\n    chainId = _useConnector.chainId,\n    active = _useConnector.active,\n    activate = _useConnector.activate,\n    activateBrowserWallet = _useConnector.activateBrowserWallet,\n    deactivate = _useConnector.deactivate,\n    setError = _useConnector.setError,\n    error = _useConnector.error,\n    isLoading = _useConnector.isLoading,\n    switchNetwork = _useConnector.switchNetwork;\n  return {\n    account: account,\n    library: library,\n    chainId: chainId,\n    active: active,\n    activate: activate,\n    activateBrowserWallet: activateBrowserWallet,\n    deactivate: deactivate,\n    setError: setError,\n    error: error,\n    isLoading: isLoading,\n    switchNetwork: switchNetwork\n  };\n}","map":{"version":3,"names":["useConnector","useEthers","_useConnector","account","library","chainId","active","activate","activateBrowserWallet","deactivate","setError","error","isLoading","switchNetwork"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\hooks\\useEthers.ts"],"sourcesContent":["import { useConnector } from '../providers/network/connectors'\nimport { Web3Ethers } from '../providers/network/connectors/context'\n\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n * \n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/TrueFiEng/useDApp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers(): Web3Ethers {\n  const {\n    account,\n    library,\n    chainId,\n    active,\n    activate,\n    activateBrowserWallet,\n    deactivate,\n    setError,\n    error,\n    isLoading,\n    switchNetwork,\n  } = useConnector()\n\n  return {\n    account,\n    library,\n    chainId,\n    active,\n    activate,\n    activateBrowserWallet,\n    deactivate,\n    setError,\n    error,\n    isLoading,\n    switchNetwork,\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iCAAiC;AAG9D;;;;;;;;;;;;;;;AAeA,OAAM,SAAUC,SAASA,CAAA;EACvB,IAAAC,aAAA,GAYIF,YAAY,EAAE;IAXhBG,OAAO,GAAAD,aAAA,CAAPC,OAAO;IACPC,OAAO,GAAAF,aAAA,CAAPE,OAAO;IACPC,OAAO,GAAAH,aAAA,CAAPG,OAAO;IACPC,MAAM,GAAAJ,aAAA,CAANI,MAAM;IACNC,QAAQ,GAAAL,aAAA,CAARK,QAAQ;IACRC,qBAAqB,GAAAN,aAAA,CAArBM,qBAAqB;IACrBC,UAAU,GAAAP,aAAA,CAAVO,UAAU;IACVC,QAAQ,GAAAR,aAAA,CAARQ,QAAQ;IACRC,KAAK,GAAAT,aAAA,CAALS,KAAK;IACLC,SAAS,GAAAV,aAAA,CAATU,SAAS;IACTC,aAAa,GAAAX,aAAA,CAAbW,aAAa;EAGf,OAAO;IACLV,OAAO,EAAPA,OAAO;IACPC,OAAO,EAAPA,OAAO;IACPC,OAAO,EAAPA,OAAO;IACPC,MAAM,EAANA,MAAM;IACNC,QAAQ,EAARA,QAAQ;IACRC,qBAAqB,EAArBA,qBAAqB;IACrBC,UAAU,EAAVA,UAAU;IACVC,QAAQ,EAARA,QAAQ;IACRC,KAAK,EAALA,KAAK;IACLC,SAAS,EAATA,SAAS;IACTC,aAAa,EAAbA;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}