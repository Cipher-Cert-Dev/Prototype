{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/CC/prototype/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { utils } from 'ethers';\nimport { defaultMulticall1ErrorMessage } from '../abi/multicall/constants';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidCall(call) {\n  if (!call) {\n    return;\n  }\n  var contract = call.contract,\n    method = call.method,\n    args = call.args;\n  console.warn(\"Invalid contract call: address=\".concat(contract.address, \" method=\").concat(method, \" args=\").concat(args));\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function validateCall(call) {\n  var contract = call.contract,\n    method = call.method,\n    args = call.args;\n  if (!contract.address || !method) {\n    throw new Error('Missing contract address or method name');\n  }\n  try {\n    contract.interface.encodeFunctionData(method, args);\n    return call;\n  } catch (err) {\n    throw new Error(\"Invalid contract call for method=\\\"\".concat(method, \"\\\" on contract=\\\"\").concat(contract.address, \"\\\": \").concat(err.message));\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n * @returns\n * One of these:\n * - a RawCall, if encoding is successful.\n * - Falsy, if there is no call to encode.\n * - an Error, if encoding fails (e.g. because of mismatched arguments).\n */\nexport function encodeCallData(call, chainId) {\n  var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  if (!call) {\n    return undefined;\n  }\n  try {\n    validateCall(call);\n  } catch (e) {\n    return e;\n  }\n  var contract = call.contract,\n    method = call.method,\n    args = call.args;\n  var isStatic = (_a = queryParams.isStatic) !== null && _a !== void 0 ? _a : queryParams.refresh === 'never';\n  var refreshPerBlocks = typeof queryParams.refresh === 'number' ? queryParams.refresh : undefined;\n  return {\n    address: contract.address,\n    data: contract.interface.encodeFunctionData(method, args),\n    chainId: chainId,\n    isStatic: isStatic,\n    refreshPerBlocks: refreshPerBlocks\n  };\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function getUniqueActiveCalls(requests) {\n  var unique = [];\n  var used = {};\n  var _iterator = _createForOfIteratorHelper(requests),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var request = _step.value;\n      if (!used[\"\".concat(request.address.toLowerCase()).concat(request.data).concat(request.chainId)]) {\n        unique.push(request);\n        used[\"\".concat(request.address.toLowerCase()).concat(request.data).concat(request.chainId)] = true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return unique;\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function getCallsForUpdate(requests, options) {\n  var callsForUpdate = [];\n  var _iterator2 = _createForOfIteratorHelper(requests),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var request = _step2.value;\n      if (options) {\n        if (options.chainId && options.chainId !== request.chainId) {\n          continue;\n        }\n        if (request.isStatic && request.lastUpdatedBlockNumber !== undefined) {\n          continue;\n        }\n        var currentBlock = options.blockNumber;\n        if (currentBlock && request.lastUpdatedBlockNumber && request.refreshPerBlocks) {\n          if (currentBlock < request.lastUpdatedBlockNumber + request.refreshPerBlocks) {\n            continue;\n          }\n        }\n      }\n      callsForUpdate.push(request);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return callsForUpdate;\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeCallResult(call, result) {\n  var _a;\n  if (!result || !call) {\n    return undefined;\n  }\n  var value = result.value,\n    success = result.success;\n  try {\n    if (success) {\n      return {\n        value: call.contract.interface.decodeFunctionResult(call.method, value),\n        error: undefined\n      };\n    } else {\n      var errorMessage = (_a = tryDecodeErrorData(value, call.contract.interface)) !== null && _a !== void 0 ? _a : 'Unknown error';\n      return {\n        value: undefined,\n        error: new Error(errorMessage)\n      };\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}\nfunction tryDecodeErrorData(data, contractInterface) {\n  if (data === '0x') {\n    return 'Call reverted without a cause message';\n  }\n  if (data.startsWith('0x08c379a0')) {\n    // decode Error(string)\n    var reason = new utils.Interface(['function Error(string)']).decodeFunctionData('Error', data)[0];\n    if (reason.startsWith('VM Exception')) {\n      return defaultMulticall1ErrorMessage;\n    }\n    return reason;\n  }\n  if (data.startsWith('0x4e487b71')) {\n    // decode Panic(uint)\n    var code = new utils.Interface(['function Panic(uint)']).decodeFunctionData('Panic', data)[0];\n    return \"panic code \".concat(code._hex);\n  }\n  try {\n    var errorInfo = contractInterface.parseError(data);\n    return \"error \".concat(errorInfo.name);\n  } catch (e) {\n    console.error(e);\n  }\n}","map":{"version":3,"names":["utils","defaultMulticall1ErrorMessage","warnOnInvalidCall","call","contract","method","args","console","warn","concat","address","validateCall","Error","interface","encodeFunctionData","err","message","encodeCallData","chainId","queryParams","arguments","length","undefined","e","isStatic","_a","refresh","refreshPerBlocks","data","getUniqueActiveCalls","requests","unique","used","_iterator","_createForOfIteratorHelper","_step","s","n","done","request","value","toLowerCase","push","f","getCallsForUpdate","options","callsForUpdate","_iterator2","_step2","lastUpdatedBlockNumber","currentBlock","blockNumber","decodeCallResult","result","success","decodeFunctionResult","error","errorMessage","tryDecodeErrorData","contractInterface","startsWith","reason","Interface","decodeFunctionData","code","_hex","errorInfo","parseError","name"],"sources":["D:\\CC\\prototype\\node_modules\\@usedapp\\core\\src\\helpers\\calls.ts"],"sourcesContent":["import { BigNumber, utils } from 'ethers'\nimport { Call } from '../hooks/useCall'\nimport { Awaited, ContractMethodNames, Falsy, TypedContract } from '../model/types'\nimport { RawCall, RawCallResult } from '../providers'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { ChainId } from '../constants/chainId'\nimport { defaultMulticall1ErrorMessage } from '../abi/multicall/constants'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidCall(call: Call | Falsy) {\n  if (!call) {\n    return\n  }\n  const { contract, method, args } = call\n  console.warn(`Invalid contract call: address=${contract.address} method=${method} args=${args}`)\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function validateCall(call: Call): Call {\n  const { contract, method, args } = call\n  if (!contract.address || !method) {\n    throw new Error('Missing contract address or method name')\n  }\n\n  try {\n    contract.interface.encodeFunctionData(method, args)\n    return call\n  } catch (err: any) {\n    throw new Error(`Invalid contract call for method=\"${method}\" on contract=\"${contract.address}\": ${err.message}`)\n  }\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n * @returns\n * One of these:\n * - a RawCall, if encoding is successful.\n * - Falsy, if there is no call to encode.\n * - an Error, if encoding fails (e.g. because of mismatched arguments).\n */\nexport function encodeCallData(\n  call: Call | Falsy,\n  chainId: number,\n  queryParams: QueryParams = {}\n): RawCall | Falsy | Error {\n  if (!call) {\n    return undefined\n  }\n  try {\n    validateCall(call)\n  } catch (e: any) {\n    return e\n  }\n  const { contract, method, args } = call\n  const isStatic = queryParams.isStatic ?? queryParams.refresh === 'never'\n  const refreshPerBlocks = typeof queryParams.refresh === 'number' ? queryParams.refresh : undefined\n\n  return {\n    address: contract.address,\n    data: contract.interface.encodeFunctionData(method, args),\n    chainId,\n    isStatic,\n    refreshPerBlocks,\n  }\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function getUniqueActiveCalls(requests: RawCall[]) {\n  const unique: RawCall[] = []\n  const used: Record<string, boolean> = {}\n  for (const request of requests) {\n    if (!used[`${request.address.toLowerCase()}${request.data}${request.chainId}`]) {\n      unique.push(request)\n      used[`${request.address.toLowerCase()}${request.data}${request.chainId}`] = true\n    }\n  }\n  return unique\n}\n\nexport interface RefreshOptions {\n  blockNumber?: number\n  chainId?: ChainId\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function getCallsForUpdate(requests: RawCall[], options?: RefreshOptions) {\n  const callsForUpdate: RawCall[] = []\n  for (const request of requests) {\n    if (options) {\n      if (options.chainId && options.chainId !== request.chainId) {\n        continue\n      }\n      if (request.isStatic && request.lastUpdatedBlockNumber !== undefined) {\n        continue\n      }\n      const currentBlock = options.blockNumber\n      if (currentBlock && request.lastUpdatedBlockNumber && request.refreshPerBlocks) {\n        if (currentBlock < request.lastUpdatedBlockNumber + request.refreshPerBlocks) {\n          continue\n        }\n      }\n    }\n    callsForUpdate.push(request)\n  }\n  return callsForUpdate\n}\n\n/**\n * Result of a {@link useCall} query.\n *\n * It is `undefined` when call didn't return yet or a object `{ value, error }` if it did.\n *\n * - `value:` `any[] | undefined` - array of results or undefined if error occurred,\n * - `error`: `Error | undefined` - encountered error or undefined if call was successful.\n *\n * @public\n */\nexport type CallResult<T extends TypedContract, MN extends ContractMethodNames<T>> =\n  | { value: Awaited<ReturnType<T['functions'][MN]> | undefined>; error: Error | undefined }\n  | undefined\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeCallResult<T extends TypedContract, MN extends ContractMethodNames<T>>(\n  call: Call | Falsy,\n  result: RawCallResult\n): CallResult<T, MN> {\n  if (!result || !call) {\n    return undefined\n  }\n  const { value, success } = result\n  try {\n    if (success) {\n      return {\n        value: call.contract.interface.decodeFunctionResult(call.method, value) as Awaited<\n          ReturnType<T['functions'][MN]>\n        >,\n        error: undefined,\n      }\n    } else {\n      const errorMessage: string = tryDecodeErrorData(value, call.contract.interface) ?? 'Unknown error'\n      return {\n        value: undefined,\n        error: new Error(errorMessage),\n      }\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error as Error,\n    }\n  }\n}\n\nfunction tryDecodeErrorData(data: string, contractInterface: utils.Interface): string | undefined {\n  if (data === '0x') {\n    return 'Call reverted without a cause message'\n  }\n\n  if (data.startsWith('0x08c379a0')) {\n    // decode Error(string)\n    const reason: string = new utils.Interface(['function Error(string)']).decodeFunctionData('Error', data)[0]\n    if (reason.startsWith('VM Exception')) {\n      return defaultMulticall1ErrorMessage\n    }\n    return reason\n  }\n\n  if (data.startsWith('0x4e487b71')) {\n    // decode Panic(uint)\n    const code: BigNumber = new utils.Interface(['function Panic(uint)']).decodeFunctionData('Panic', data)[0]\n    return `panic code ${code._hex}`\n  }\n\n  try {\n    const errorInfo = contractInterface.parseError(data)\n    return `error ${errorInfo.name}`\n  } catch (e) {\n    console.error(e)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}