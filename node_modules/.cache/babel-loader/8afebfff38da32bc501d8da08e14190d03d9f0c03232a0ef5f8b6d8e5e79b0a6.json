{"ast":null,"code":"import _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { useConfig } from '../../..';\nimport { useConnector, useReadonlyNetworks } from '../../network';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common';\nimport { getCallsForUpdate, getUniqueActiveCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\nimport { useWindow } from '../../window/context';\nimport { useUpdateNetworksState } from '../../network/readonlyNetworks/context';\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(function (chainId) {\n    return [Number(chainId), {\n      value: state[Number(chainId)],\n      multicallAddress: multicallAddresses[Number(chainId)]\n    }];\n  }));\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar stripCall = function stripCall(_a) {\n  var isStatic = _a.isStatic,\n    lastUpdatedBlockNumber = _a.lastUpdatedBlockNumber,\n    strippedCall = __rest(_a, [\"isStatic\", \"lastUpdatedBlockNumber\"]);\n  return strippedCall;\n};\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider(_ref) {\n  var children = _ref.children,\n    multicallAddresses = _ref.multicallAddresses;\n  var _useConfig = useConfig(),\n    multicallVersion = _useConfig.multicallVersion,\n    fastMulticallEncoding = _useConfig.fastMulticallEncoding;\n  var networks = useReadonlyNetworks();\n  var blockNumbers = useBlockNumbers();\n  var dispatchNetworksState = useUpdateNetworksState();\n  var isActive = useWindow();\n  var _useReducer = useReducer(callsReducer, []),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    calls = _useReducer2[0],\n    dispatchCalls = _useReducer2[1];\n  var _useReducer3 = useReducer(chainStateReducer, {}),\n    _useReducer4 = _slicedToArray(_useReducer3, 2),\n    state = _useReducer4[0],\n    dispatchState = _useReducer4[1];\n  var _useConnector = useConnector(),\n    reportError = _useConnector.reportError;\n  var multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);\n  var _useDebouncePair = useDebouncePair(calls, networks, 50),\n    _useDebouncePair2 = _slicedToArray(_useDebouncePair, 2),\n    debouncedCalls = _useDebouncePair2[0],\n    debouncedNetworks = _useDebouncePair2[1];\n  var uniqueCalls = useMemo(function () {\n    return getUniqueActiveCalls(debouncedCalls);\n  }, [debouncedCalls]);\n  // used for deep equality in hook dependencies\n  var uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall));\n  var chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n  function multicallForChain(chainId, provider) {\n    if (!isActive) {\n      return;\n    }\n    var blockNumber = blockNumbers[chainId];\n    var multicallAddress = multicallAddresses[chainId];\n    if (!provider || !blockNumber) {\n      return;\n    }\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n    var updatedCalls = getCallsForUpdate(debouncedCalls, {\n      chainId: chainId,\n      blockNumber: blockNumber\n    });\n    var callsOnThisChain = getUniqueActiveCalls(updatedCalls);\n    if (callsOnThisChain.length > 0 && !multicallAddress) {\n      reportError(new Error(\"Missing multicall address for chain id \".concat(chainId)));\n      return;\n    }\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, function (error) {\n      dispatchNetworksState({\n        type: 'ADD_ERROR',\n        chainId: chainId,\n        error: error\n      });\n    });\n    dispatchCalls({\n      type: 'UPDATE_CALLS',\n      calls: calls,\n      updatedCalls: updatedCalls,\n      blockNumber: blockNumber,\n      chainId: chainId\n    });\n  }\n  useEffect(function () {\n    var _a, _b;\n    for (var _i = 0, _Object$entries = Object.entries(networks); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        _chainId = _Object$entries$_i[0],\n        provider = _Object$entries$_i[1];\n      var _chainId2 = Number(_chainId);\n      // chainId is in provider is not the same as the chainId in the state wait for chainId to catch up\n      if (_chainId2 === ((_a = provider.network) === null || _a === void 0 ? void 0 : _a.chainId) || _chainId2 === ((_b = provider._network) === null || _b === void 0 ? void 0 : _b.chainId)) {\n        multicallForChain(_chainId2, provider);\n      }\n    }\n  }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers]);\n  var chains = useMemo(function () {\n    return composeChainState(networks, state, multicallAddresses);\n  }, [state, multicallAddresses, networks]);\n  var provided = {\n    chains: chains,\n    dispatchCalls: dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"names":["useEffect","useMemo","useReducer","useDebouncePair","useBlockNumbers","MultiChainStatesContext","useConfig","useConnector","useReadonlyNetworks","fromEntries","performMulticall","callsReducer","chainStateReducer","multicall1Factory","multicall2Factory","getCallsForUpdate","getUniqueActiveCalls","useDevtoolsReporting","useChainId","useWindow","useUpdateNetworksState","composeChainState","networks","state","multicallAddresses","Object","keys","map","chainId","Number","value","multicallAddress","stripCall","_a","isStatic","lastUpdatedBlockNumber","strippedCall","__rest","MultiChainStateProvider","_ref","children","_useConfig","multicallVersion","fastMulticallEncoding","blockNumbers","dispatchNetworksState","isActive","_useReducer","_useReducer2","_slicedToArray","calls","dispatchCalls","_useReducer3","_useReducer4","dispatchState","_useConnector","reportError","multicall","_useDebouncePair","_useDebouncePair2","debouncedCalls","debouncedNetworks","uniqueCalls","uniqueCallsJSON","JSON","stringify","undefined","multicallForChain","provider","blockNumber","updatedCalls","callsOnThisChain","length","Error","concat","error","type","_i","_Object$entries","entries","_Object$entries$_i","_chainId","network","_b","_network","chains","provided","_jsx","Provider"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\multiChainStates\\provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useMemo, useReducer } from 'react'\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks'\nimport { MultiChainStatesContext } from './context'\nimport { ChainId, State, useConfig } from '../../..'\nimport { useConnector, useReadonlyNetworks } from '../../network'\nimport { fromEntries } from '../../../helpers/fromEntries'\nimport { performMulticall } from '../common/performMulticall'\nimport { Providers } from '../../network/readonlyNetworks/model'\nimport { providers } from 'ethers'\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory, RawCall } from '../common'\nimport { getCallsForUpdate, getUniqueActiveCalls } from '../../../helpers'\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting'\nimport { useChainId } from '../../../hooks/useChainId'\nimport { useWindow } from '../../window/context'\nimport { useUpdateNetworksState } from '../../network/readonlyNetworks/context'\n\ninterface Props {\n  children: ReactNode\n  multicallAddresses: {\n    [chainId: number]: string\n  }\n}\n\nfunction composeChainState(networks: Providers, state: State, multicallAddresses: Props['multicallAddresses']) {\n  return fromEntries(\n    Object.keys(networks).map((chainId) => [\n      Number(chainId),\n      {\n        value: state[Number(chainId)],\n        multicallAddress: multicallAddresses[Number(chainId)],\n      },\n    ])\n  )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stripCall = ({ isStatic, lastUpdatedBlockNumber, ...strippedCall }: RawCall) => strippedCall\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider({ children, multicallAddresses }: Props) {\n  const { multicallVersion, fastMulticallEncoding } = useConfig()\n  const networks = useReadonlyNetworks()\n  const blockNumbers = useBlockNumbers()\n  const dispatchNetworksState = useUpdateNetworksState()\n  const isActive = useWindow()\n\n  const [calls, dispatchCalls] = useReducer(callsReducer, [])\n  const [state, dispatchState] = useReducer(chainStateReducer, {})\n  const { reportError } = useConnector()\n\n  const multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding ?? false)\n\n  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50)\n  const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls])\n\n  // used for deep equality in hook dependencies\n  const uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall))\n\n  const chainId = useChainId()\n  useDevtoolsReporting(\n    uniqueCallsJSON,\n    uniqueCalls,\n    chainId !== undefined ? blockNumbers[chainId as ChainId] : undefined,\n    multicallAddresses\n  )\n\n  function multicallForChain(chainId: ChainId, provider: providers.BaseProvider) {\n    if (!isActive) {\n      return\n    }\n    const blockNumber = blockNumbers[chainId]\n    const multicallAddress = multicallAddresses[chainId]\n\n    if (!provider || !blockNumber) {\n      return\n    }\n\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return\n    }\n\n    const updatedCalls = getCallsForUpdate(debouncedCalls, { chainId, blockNumber })\n    const callsOnThisChain = getUniqueActiveCalls(updatedCalls)\n\n    if (callsOnThisChain.length > 0 && !multicallAddress) {\n      reportError(new Error(`Missing multicall address for chain id ${chainId}`))\n      return\n    }\n\n    performMulticall(\n      provider,\n      multicall,\n      multicallAddress,\n      blockNumber,\n      callsOnThisChain,\n      dispatchState,\n      chainId,\n      (error) => {\n        dispatchNetworksState({\n          type: 'ADD_ERROR',\n          chainId,\n          error,\n        })\n      }\n    )\n    dispatchCalls({ type: 'UPDATE_CALLS', calls, updatedCalls, blockNumber, chainId })\n  }\n\n  useEffect(() => {\n    for (const [_chainId, provider] of Object.entries(networks)) {\n      const chainId = Number(_chainId)\n      // chainId is in provider is not the same as the chainId in the state wait for chainId to catch up\n      if (chainId === provider.network?.chainId || chainId === provider._network?.chainId) {\n        multicallForChain(chainId, provider)\n      }\n    }\n  }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers])\n\n  const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [\n    state,\n    multicallAddresses,\n    networks,\n  ])\n\n  const provided = { chains, dispatchCalls }\n\n  return <MultiChainStatesContext.Provider value={provided} children={children} />\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}