{"ast":null,"code":"import _regeneratorRuntime from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { utils } from 'ethers';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\nexport function LocalMulticallProvider(_ref) {\n  var children = _ref.children;\n  var updateConfig = useUpdateConfig();\n  var _useEthers = useEthers(),\n    library = _useEthers.library,\n    chainId = _useEthers.chainId;\n  var _useLocalStorage = useLocalStorage('local_multicall_address' + chainId),\n    _useLocalStorage2 = _slicedToArray(_useLocalStorage, 3),\n    setMulticallAddress = _useLocalStorage2[1],\n    getCurrent = _useLocalStorage2[2];\n  var _useConfig = useConfig(),\n    multicallAddresses = _useConfig.multicallAddresses,\n    multicallVersion = _useConfig.multicallVersion;\n  var _useState = useState(LocalMulticallState.Unknown),\n    _useState2 = _slicedToArray(_useState, 2),\n    localMulticallState = _useState2[0],\n    setLocalMulticallState = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    multicallBlockNumber = _useState4[0],\n    setMulticallBlockNumber = _useState4[1];\n  var blockNumber = useBlockNumber();\n  useEffect(function () {\n    var _a;\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      var _ref2;\n      var checkDeployed = function checkDeployed() {\n        return (_ref2 = _ref2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _ref3;\n          var multicallAddress, multicallCode, signer, deployMulticall;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                multicallAddress = getCurrent();\n                if (!(typeof multicallAddress === 'string' && utils.isAddress(multicallAddress))) {\n                  _context2.next = 8;\n                  break;\n                }\n                _context2.next = 4;\n                return library.getCode(multicallAddress);\n              case 4:\n                multicallCode = _context2.sent;\n                if (!(multicallCode !== '0x')) {\n                  _context2.next = 8;\n                  break;\n                }\n                updateConfig({\n                  multicallAddresses: _defineProperty({}, chainId, multicallAddress)\n                });\n                return _context2.abrupt(\"return\");\n              case 8:\n                signer = library && 'getSigner' in library ? library.getSigner() : undefined;\n                if (signer) {\n                  _context2.next = 12;\n                  break;\n                }\n                setLocalMulticallState(LocalMulticallState.Error);\n                return _context2.abrupt(\"return\");\n              case 12:\n                setLocalMulticallState(LocalMulticallState.Deploying);\n                deployMulticall = function deployMulticall() {\n                  return (_ref3 = _ref3 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                    var _yield$deployContract, contractAddress, _blockNumber;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n                        case 3:\n                          _yield$deployContract = _context.sent;\n                          contractAddress = _yield$deployContract.contractAddress;\n                          _blockNumber = _yield$deployContract.blockNumber;\n                          updateConfig({\n                            multicallAddresses: _defineProperty({}, chainId, contractAddress)\n                          });\n                          setMulticallAddress(contractAddress);\n                          setMulticallBlockNumber(_blockNumber);\n                          setLocalMulticallState(LocalMulticallState.Deployed);\n                          _context.next = 15;\n                          break;\n                        case 12:\n                          _context.prev = 12;\n                          _context.t0 = _context[\"catch\"](0);\n                          setLocalMulticallState(LocalMulticallState.Error);\n                        case 15:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee, null, [[0, 12]]);\n                  }))).apply(this, arguments);\n                };\n                void deployMulticall();\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }))).apply(this, arguments);\n      };\n      void checkDeployed();\n    }\n  }, [library, chainId]);\n  var awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    });\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    });\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n}","map":{"version":3,"names":["useEffect","useState","utils","getChainById","useEthers","useBlockNumber","useConfig","useUpdateConfig","useLocalStorage","multicallABI","multicall2ABI","deployContract","LocalMulticallState","LocalMulticallProvider","_ref","children","updateConfig","_useEthers","library","chainId","_useLocalStorage","_useLocalStorage2","_slicedToArray","setMulticallAddress","getCurrent","_useConfig","multicallAddresses","multicallVersion","_useState","Unknown","_useState2","localMulticallState","setLocalMulticallState","_useState3","_useState4","multicallBlockNumber","setMulticallBlockNumber","blockNumber","_a","isLocalChain","NonLocal","Deployed","Deploying","_ref2","checkDeployed","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_ref3","multicallAddress","multicallCode","signer","deployMulticall","wrap","_callee2$","_context2","prev","next","isAddress","getCode","sent","_defineProperty","abrupt","getSigner","undefined","Error","_callee","_yield$deployContract","contractAddress","_blockNumber","_callee$","_context","t0","stop","apply","arguments","awaitingMulticallBlock","_jsx","_Fragment"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\providers\\LocalMulticallProvider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useState } from 'react'\nimport { utils } from 'ethers'\nimport { getChainById } from '../helpers'\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks'\nimport multicallABI from '../constants/abi/MultiCall.json'\nimport multicall2ABI from '../constants/abi/MultiCall2.json'\nimport { deployContract } from '../helpers/contract'\n\ninterface LocalMulticallProps {\n  children: ReactNode\n}\n\nenum LocalMulticallState {\n  Unknown,\n  NonLocal,\n  Deploying,\n  Deployed,\n  Error,\n}\n\nexport function LocalMulticallProvider({ children }: LocalMulticallProps) {\n  const updateConfig = useUpdateConfig()\n  const { library, chainId } = useEthers()\n  const [, setMulticallAddress, getCurrent] = useLocalStorage('local_multicall_address' + chainId)\n\n  const { multicallAddresses, multicallVersion } = useConfig()\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown)\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState<number>()\n  const blockNumber = useBlockNumber()\n\n  useEffect(() => {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown)\n    } else if (!getChainById(chainId)?.isLocalChain) {\n      setLocalMulticallState(LocalMulticallState.NonLocal)\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed)\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const checkDeployed = async () => {\n        const multicallAddress = getCurrent()\n\n        if (typeof multicallAddress === 'string' && utils.isAddress(multicallAddress)) {\n          const multicallCode = await library.getCode(multicallAddress)\n          if (multicallCode !== '0x') {\n            updateConfig({ multicallAddresses: { [chainId]: multicallAddress } })\n            return\n          }\n        }\n\n        const signer = library && 'getSigner' in library ? library.getSigner() : undefined\n        if (!signer) {\n          setLocalMulticallState(LocalMulticallState.Error)\n          return\n        }\n\n        setLocalMulticallState(LocalMulticallState.Deploying)\n\n        const deployMulticall = async () => {\n          try {\n            const { contractAddress, blockNumber } = await deployContract(\n              multicallVersion === 1 ? multicallABI : multicall2ABI,\n              signer\n            )\n            updateConfig({ multicallAddresses: { [chainId]: contractAddress } })\n            setMulticallAddress(contractAddress)\n            setMulticallBlockNumber(blockNumber)\n            setLocalMulticallState(LocalMulticallState.Deployed)\n          } catch {\n            setLocalMulticallState(LocalMulticallState.Error)\n          }\n        }\n        void deployMulticall()\n      }\n      void checkDeployed()\n    }\n  }, [library, chainId])\n\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber\n\n  if (\n    localMulticallState === LocalMulticallState.Deploying ||\n    (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)\n  ) {\n    return <div>Deploying multicall...</div>\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return <div>Error deploying multicall contract</div>\n  } else {\n    return <>{children}</>\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}