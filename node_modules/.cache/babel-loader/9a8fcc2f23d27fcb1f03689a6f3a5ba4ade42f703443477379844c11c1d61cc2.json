{"ast":null,"code":"import { useContext } from 'react';\nimport { getChainById } from '../helpers';\nimport { ConfigContext } from '../providers';\nvar validConfigs = function validConfigs(configs) {\n  if (!(configs === null || configs === void 0 ? void 0 : configs.networks) || (configs === null || configs === void 0 ? void 0 : configs.networks.length) === 0) {\n    console.warn('No networks or supportedChain configured');\n  }\n  return configs;\n};\n/**\n * Returns singleton instance of {@link Config}.\n * Takes no parameters.\n * @public\n */\nexport function useConfig() {\n  var _a;\n  var _useContext = useContext(ConfigContext),\n    config = _useContext.config;\n  // backward compatible with supportedChains\n  if (config.supportedChains) {\n    console.warn('supportedChain is deprecated, please pass networks instead');\n    var networks = (_a = config.supportedChains) === null || _a === void 0 ? void 0 : _a.map(function (chainId) {\n      return getChainById(chainId);\n    });\n    return validConfigs(Object.assign(Object.assign({}, config), {\n      networks: networks\n    }));\n  }\n  return validConfigs(config);\n}\n/**\n * @public\n */\nexport function useUpdateConfig() {\n  var _useContext2 = useContext(ConfigContext),\n    updateConfig = _useContext2.updateConfig;\n  return updateConfig;\n}","map":{"version":3,"names":["useContext","getChainById","ConfigContext","validConfigs","configs","networks","length","console","warn","useConfig","_useContext","config","supportedChains","_a","map","chainId","Object","assign","useUpdateConfig","_useContext2","updateConfig"],"sources":["D:\\CC\\test\\node_modules\\@usedapp\\core\\src\\hooks\\useConfig.ts"],"sourcesContent":["import { useContext } from 'react'\nimport { Chain, FullConfig } from '../constants'\nimport { getChainById } from '../helpers'\nimport { ConfigContext } from '../providers'\n\nconst validConfigs = (configs: FullConfig): FullConfig | Record<string, never> => {\n  if (!configs?.networks || configs?.networks.length === 0) {\n    console.warn('No networks or supportedChain configured')\n  }\n  return configs\n}\n\n/**\n * Returns singleton instance of {@link Config}.\n * Takes no parameters.\n * @public\n */\nexport function useConfig() {\n  const { config } = useContext(ConfigContext)\n\n  // backward compatible with supportedChains\n  if (config.supportedChains) {\n    console.warn('supportedChain is deprecated, please pass networks instead')\n    const networks: Chain[] = config.supportedChains?.map((chainId) => getChainById(chainId)) as Chain[]\n    return validConfigs({\n      ...config,\n      networks,\n    })\n  }\n\n  return validConfigs(config)\n}\n\n/**\n * @public\n */\nexport function useUpdateConfig() {\n  const { updateConfig } = useContext(ConfigContext)\n  return updateConfig\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,cAAc;AAE5C,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,OAAmB,EAAwC;EAC/E,IAAI,EAACA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,QAAQ,KAAI,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,QAAQ,CAACC,MAAM,MAAK,CAAC,EAAE;IACxDC,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;;EAE1D,OAAOJ,OAAO;AAChB,CAAC;AAED;;;;;AAKA,OAAM,SAAUK,SAASA,CAAA;;EACvB,IAAAC,WAAA,GAAmBV,UAAU,CAACE,aAAa,CAAC;IAApCS,MAAM,GAAAD,WAAA,CAANC,MAAM;EAEd;EACA,IAAIA,MAAM,CAACC,eAAe,EAAE;IAC1BL,OAAO,CAACC,IAAI,CAAC,4DAA4D,CAAC;IAC1E,IAAMH,QAAQ,GAAY,CAAAQ,EAAA,GAAAF,MAAM,CAACC,eAAe,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,GAAG,CAAC,UAACC,OAAO;MAAA,OAAKd,YAAY,CAACc,OAAO,CAAC;IAAA,EAAY;IACpG,OAAOZ,YAAY,CAAAa,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACdN,MAAM;MACTN,QAAQ,EAARA;IAAQ,GACR;;EAGJ,OAAOF,YAAY,CAACQ,MAAM,CAAC;AAC7B;AAEA;;;AAGA,OAAM,SAAUO,eAAeA,CAAA;EAC7B,IAAAC,YAAA,GAAyBnB,UAAU,CAACE,aAAa,CAAC;IAA1CkB,YAAY,GAAAD,YAAA,CAAZC,YAAY;EACpB,OAAOA,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}