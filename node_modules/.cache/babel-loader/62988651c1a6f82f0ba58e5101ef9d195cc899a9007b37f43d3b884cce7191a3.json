{"ast":null,"code":"import _classCallCheck from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/CC/Server/prototype/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BigNumber } from 'ethers';\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport var CurrencyValue = /*#__PURE__*/function () {\n  function CurrencyValue(currency, value) {\n    _classCallCheck(this, CurrencyValue);\n    this.currency = currency;\n    this.value = value;\n  }\n  _createClass(CurrencyValue, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value.toString();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      var overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.currency.format(this.value.toString(), overrideOptions);\n    }\n  }, {\n    key: \"checkCurrency\",\n    value: function checkCurrency(other) {\n      if (this.currency !== other.currency) {\n        throw new TypeError(\"Currency mismatch \".concat(this.currency.ticker, \" != \").concat(other.currency.ticker));\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      return new CurrencyValue(this.currency, fn(this.value));\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      this.checkCurrency(other);\n      return this.map(function (x) {\n        return x.add(other.value);\n      });\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      this.checkCurrency(other);\n      return this.map(function (x) {\n        return x.sub(other.value);\n      });\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(value) {\n      return this.map(function (x) {\n        return x.mul(value);\n      });\n    }\n  }, {\n    key: \"div\",\n    value: function div(value) {\n      return this.map(function (x) {\n        return x.div(value);\n      });\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(value) {\n      return this.map(function (x) {\n        return x.mod(value);\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.currency === other.currency && this.value.eq(other.value);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      this.checkCurrency(other);\n      return this.value.lt(other.value);\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      this.checkCurrency(other);\n      return this.value.lte(other.value);\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      this.checkCurrency(other);\n      return this.value.gt(other.value);\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      this.checkCurrency(other);\n      return this.value.gte(other.value);\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.value.isZero();\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(currency, value) {\n      return new CurrencyValue(currency, BigNumber.from(value));\n    }\n  }, {\n    key: \"zero\",\n    value: function zero(currency) {\n      return new CurrencyValue(currency, BigNumber.from(0));\n    }\n  }]);\n  return CurrencyValue;\n}();","map":{"version":3,"names":["BigNumber","CurrencyValue","currency","value","_classCallCheck","_createClass","key","toString","format","overrideOptions","arguments","length","undefined","checkCurrency","other","TypeError","concat","ticker","map","fn","add","x","sub","mul","div","mod","equals","eq","lt","lte","gt","gte","isZero","fromString","from","zero"],"sources":["D:\\CC\\Server\\prototype\\node_modules\\@usedapp\\core\\src\\model\\CurrencyValue.ts"],"sourcesContent":["import { BigNumber, BigNumberish } from 'ethers'\nimport { Currency } from './Currency'\nimport { CurrencyFormatOptions } from './formatting'\n\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport class CurrencyValue {\n  constructor(readonly currency: Currency, readonly value: BigNumber) {}\n\n  static fromString(currency: Currency, value: string) {\n    return new CurrencyValue(currency, BigNumber.from(value))\n  }\n\n  static zero(currency: Currency) {\n    return new CurrencyValue(currency, BigNumber.from(0))\n  }\n\n  toString() {\n    return this.value.toString()\n  }\n\n  format(overrideOptions: Partial<CurrencyFormatOptions> = {}) {\n    return this.currency.format(this.value.toString(), overrideOptions)\n  }\n\n  private checkCurrency(other: CurrencyValue) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`)\n    }\n  }\n\n  map(fn: (value: BigNumber) => BigNumber) {\n    return new CurrencyValue(this.currency, fn(this.value))\n  }\n\n  add(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.add(other.value))\n  }\n\n  sub(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.sub(other.value))\n  }\n\n  mul(value: BigNumberish) {\n    return this.map((x) => x.mul(value))\n  }\n\n  div(value: BigNumberish) {\n    return this.map((x) => x.div(value))\n  }\n\n  mod(value: BigNumberish) {\n    return this.map((x) => x.mod(value))\n  }\n\n  equals(other: CurrencyValue) {\n    return this.currency === other.currency && this.value.eq(other.value)\n  }\n\n  lt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lt(other.value)\n  }\n\n  lte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lte(other.value)\n  }\n\n  gt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gt(other.value)\n  }\n\n  gte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gte(other.value)\n  }\n\n  isZero() {\n    return this.value.isZero()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}